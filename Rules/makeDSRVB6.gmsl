<gmBasic>
<!--
This script is used by gmStudio's Generate DSR Info feature.

This script generates a bundle file containing three template files:

1) .BAS file
2) .VBP file
3) .FRM file (for Designers that require an MDI form host)

The resulting bundle is edited by gmStudio to reference the 
individual DSR files/objects supporting FRM and BAS file.

The VB6 code along with the referenced DSR/DSX files are deployed 
to a dsr folder in the workspace. 

When compiled and run, the VB6 program can inspect and describe 
the DSR/DSX files.   The generated reports contain metadata for 
each referenced DSR/DSX files.    

Two types of files are generated:

1) .dsx.xml files are xml files generated by activereports.savelayout
2) .dsx.rpt files are text files in VB6 propertybag format 

These files are written to the dsr folder.

The rpt are typically moved to the idf\FromCode folder.

When gmBasic encounters a reference to a DSX file, it will load
the .dsx.rpt file.  This file provides the names and types of all controls
contained in the report. This helps reduce call by names that would
occur otherwise.

Note: this technology only works with ActiveReports V2.0.  If
you have ActiveReports v1.0 files, you will have to use the 
ActiveReports Upsizer to upgrade them to v2.0 before
you run the DSXreporter.exe.

-->
<Storage Action="Create" />
<Select MaxOutputWidth="2048"/>
<Select TraceCalls="off"/>
<Select Progress="1"/>
<Output Status="New" Filename="%BndPath%" />
<gmsl><![CDATA[
/*
1) Create the DSX reporter bas module 
This will be pre-edited to include the calls authorDSRInfo 
*/
#TextStart
cat >%ProjFolder%\dsr\modDSXReporter.bas <<'!)(!'
Attribute VB_Name = "modDSXReporter"
Option Explicit
Dim rpt As String

Private vbpName As String
Private Const DDLibName As String = "DDActiveReports2"
Private Const dsxFolder As String = "%ProjFolder%\dsr\\"

Private Sub Main()
    vbpName = "%vbpName%"
    %foreach designer, call authorDSRInfo%
End
End Sub

Public Function ind(ByVal n As Integer) As String
    ind = Space(n * 4)
End Function

Public Sub authorDSRInfo(ByVal dsr As Object)
   If TypeOf dsr Is ActiveReport Then authorDSRInfoActiveReport dsr
   If TypeOf dsr Is UserForm Then authorDSRInfoUserForm dsr
End Sub

Public Sub authorDSRInfoUserForm(frm As UserForm)
   Dim ctl As MSForms.Control
   Dim frmName As String
   frmName = TypeName(frm)

   Dim filePath As String
   filePath = dsxFolder & vbpName & "_" & frmName & ".dsx.rpt"
   
   If Dir(filePath) <> "" Then Kill filePath

   Dim rpt as String

   rpt = "Begin MSForms.UserForm" & " " & frmName & vbcrlf

   For Each ctl In frm.Controls
      rpt = rpt & "   Begin MSForms." & TypeName(ctl) & " " & ctl.Name & vbcrlf
      Dim ctlInfo As String
      ctlInfo = writePropertyBag(ctl)
      rpt = rpt & ctlInfo
      rpt = rpt & "   End" & vbcrlf
   With ctl
   End With
Next
rpt = rpt & "End"
writeLog rpt, filePath
End Sub

Private Function writePropertyBag(ctl As MSForms.Control) As String

   Dim tlApp As TLI.TLIApplication
   Dim tlIrf As TLI.InterfaceInfo
   Dim tlmi As TLI.MemberInfo
   Dim obj As Object

   Set obj = ctl
   Set tlApp = New TLI.TLIApplication
   Set tlIrf = tlApp.InterfaceInfoFromObject(obj)

   Dim rpt As String

   For Each tlmi In tlIrf.Members
      If (tlmi.DescKind = DESCKIND_FUNCDESC And tlmi.InvokeKind = INVOKE_PROPERTYPUT) Then
         Dim propInfo As String
         propInfo = writeProperty(obj, tlmi, tlIrf, tlApp)
         If (Len(propInfo) > 0) Then rpt = rpt & propInfo  & vbCrLf
      End If
   Next

   Set tlmi = Nothing
   Set tlIrf = Nothing
   Set tlApp = Nothing   
   
   writePropertyBag = rpt

End Function

Private Function writeProperty(obj As Object, tlmi As TLI.MemberInfo, tlIrf As TLI.InterfaceInfo, tlApp As TLI.TLIApplication) As String
   writeProperty = ""

   Dim propType As TLI.TliVarType
   propType = tlmi.ReturnType.VarType
   If (propType = VT_EMPTY) Then Exit Function


   Dim propName As String
   propName = tlmi.Name

   Dim propValu As Variant
   propValu = "UNKNOWN"

   On Error GoTo ErrHandler
   Dim args() As Variant
   propValu = tlApp.InvokeHook(obj, tlmi.MemberId, INVOKE_PROPERTYGET)
ErrHandler:
   If Err Then
      Debug.Print "Unable to get value for " & propName
      Exit Function
   Else
      ' TODO: add specialized handling for different types
      Select Case propType
          Case VT_BSTR, VT_LPSTR, VT_LPWSTR
            propValu = """" & propValu & """"
         Case VT_VARIANT
            If (TypeName(propValu) = "Empty") Then Exit Function
            If (TypeName(propValu) = "String") Then propValu = """" & propValu & """"
         Case VT_CY
            propValu = propValu & "@"
      End Select

      Dim rpt As String
      rpt = "      %propName% = %propValu%"
      rpt = Replace(rpt, "%propName%", propName)
      rpt = Replace(rpt, "%propValu%", propValu)
      'If (propName = "FontSize") Then Stop
      writeProperty = rpt
   End If
End Function

Public Sub authorDSRInfoActiveReport(ByVal ar As ActiveReport)
On Error GoTo ErrHandler

   Dim dsxXmlPath As String
   dsxXmlPath = authorDSRInfo2AR(ar)

   Dim dsxDom As MSXML2.DOMDocument
   Set dsxDom = New MSXML2.DOMDocument

   dsxDom.Load dsxXmlPath

   Dim filePath As String
   filePath = dsxFolder & vbpName & "_" & TypeName(ar) & ".dsx.rpt"

   If Dir(filePath) <> "" Then Kill filePath

   Dim sect As DDActiveReports2.Section
   Dim ctl As Object
   rpt = ""
   rpt = rpt & ind(0) & "Begin " & DDLibName & ".ActiveReport " & TypeName(ar) & vbCrLf
   rpt = rpt & ind(1) & "Version = " & ar.Version & vbCrLf
   For Each sect In ar.Sections
      rpt = rpt & ind(1) & "Begin " & DDLibName & ".Section " & sect.Name & vbCrLf
      rpt = rpt & authorDSRInfoPropsAR(sect.Name, "", dsxDom, 2)
      For Each ctl In sect.Controls
         Dim props As String
         props = authorDSRInfoPropsAR(sect.Name, ctl.Name, dsxDom, 3)
         Dim libname As String
         libname = getLibName(props)
         rpt = rpt & ind(2) & "Begin " & libname & "." & TypeName(ctl) & " " & ctl.Name & vbCrLf
         rpt = rpt & props
         rpt = rpt & ind(2) & "End " & vbCrLf
      Next
      rpt = rpt & ind(1) & "End" & vbCrLf
    Next
    rpt = rpt & ind(0) & "End"
    writeLog rpt, filePath

ErrHandler:
    If Err Then writeLog "ERROR=" & Err.Description, filePath & ".err"
    Set ar = Nothing
End Sub

Public Function getLibName(ByVal props As String) As String
   Dim proplist As Variant
   proplist = Split(props, vbCrLf)
   Dim prop As Variant
   For Each prop In proplist
      If InStr(Trim(prop), "Type ") = 1 Then
         Dim i As Integer
         Dim j As Integer
         Dim libName As String
         i = InStr(prop, """")
         j = InStr(i, prop, ".")
         libName = Mid(prop, i + 1, j - i - 1)
         'Debug.Print libname
         If (libName = "AR") Then libName = DDLibName
         getLibName = libName
         Exit Function
      End If
   Next
End Function

Public Function authorDSRInfo2AR(ByVal ar As ActiveReport) As String
   Dim filePath As String
   filePath = dsxFolder & vbpName & "_" & TypeName(ar) & ".dsx.xml"
   ar.SaveLayout filePath, ddSOFile
   authorDSRInfo2AR = filePath
End Function

Public Function authorDSRInfoPropsAR(sectName As String, ctlName As String, dom As MSXML2.DOMDocument, indent As Integer) As String
    Dim rpt As String
    rpt = ""
    
    'rpt = ind(indent) & "'load props for " & sectName & "." & ctlName & vbCrLf
    
    Dim dsxnod As MSXML2.IXMLDOMNode
    
    Set dsxnod = dom.selectSingleNode(".//Section[@Name='" & sectName & "']")
    
    If (Len(ctlName) > 0) Then
        Set dsxnod = dsxnod.selectSingleNode(".//Control[@Name='" & ctlName & "']")
    End If
    
    Dim i As Integer
    Dim maxwidth As Integer
    Dim attrib As MSXML2.IXMLDOMNode
    Dim propName As String
    For i = 0 To dsxnod.Attributes.length - 1
        Set attrib = dsxnod.Attributes(i)
        propName = attrib.nodeName
        maxwidth = IIf(Len(propName) > maxwidth, Len(propName), maxwidth)
    Next
    Dim spacer As String
    spacer = "!" & String(maxwidth, "@")
    For i = 0 To dsxnod.Attributes.length - 1
      Set attrib = dsxnod.Attributes(i)
      propName = attrib.nodeName
      Dim valu As Variant
      valu = Trim(attrib.nodeValue)
      rpt = rpt & ind(indent) & Format(propName, spacer) & " = '" & valu & "'" & vbCrLf
   Next
    rpt = Replace(rpt,"'",Chr(34))
    
    authorDSRInfoPropsAR = rpt
End Function

Public Sub writeLog(ByVal rpt As String, ByVal filePath As String)
   Open filePath For Append As 1
   Debug.Print "writing " & Len(rpt) & " to " & filePath
   Print #1, rpt
   'Debug.Print rpt
   Close 1
End Sub
!)(!
#TextEnd
/*
Create the DSX reporter VBP
This will be pre-edited to include the references to DSR files 
*/
#TextStart
cat >%ProjFolder%\dsr\DSXReporter.vbp <<'!)(!'
Type=Exe
Reference=*\G{00020430-0000-0000-C000-000000000046}#2.0#0#..\..\..\..\Windows\SysWOW64\stdole2.tlb#OLE Automation
Reference=*\G{00000205-0000-0010-8000-00AA006D2EA4}#2.5#0#..\..\..\..\Program Files (x86)\Common Files\System\ado\msado25.tlb#Microsoft ActiveX Data Objects 2.5 Library
Reference=*\G{F5078F18-C551-11D3-89B9-0000F81FE221}#6.0#0#..\..\..\..\Windows\System32\msxml6.dll#Microsoft XML, v6.0
Reference=*\G{013A8BB0-A25B-11D1-8BB6-00A0C98CD92B}#1.0#0#..\..\..\..\Program Files (x86)\Data Dynamics\ActiveReports Pro\pdfexpt.dll#ActiveReports PDF Export Filter
Reference=*\G{A7973091-BC64-4F16-84D4-A4BE059B4927}#2.0#0#..\..\..\..\Program Files (x86)\Data Dynamics\ActiveReports Pro\arpro2.dll#Data Dynamics ActiveReports 2.0
Reference=*\G{E281C260-6F27-11D1-8AF0-00A0C98CD92B}#2.0#0#..\..\..\..\Program Files (x86)\Data Dynamics\ActiveReports Pro\ardespro2.dll#Data Dynamics ActiveReports RunTime Designer
Reference=*\G{A45D986F-3AAF-4A3B-A003-A6C53E8715A2}#1.0#0#..\..\..\..\Program Files (x86)\Data Dynamics\ActiveReports Pro\ARVIEW2.OCX#Data Dynamics ActiveReports Viewer 2.0
Reference=*\G{8B217740-717D-11CE-AB5B-D41203C10000}#1.0#0#..\..\..\..\WINDOWS\SysWow64\TLBINF32.DLL#TypeLib Information
Reference=*\G{0D452EE1-E08F-101A-852E-02608C4D0BB4}#2.0#0#..\..\..\..\Windows\SysWOW64\FM20.DLL#Microsoft Forms 2.0 Object Library
%foreach designer, add a Designer reference%
Module=modDSXReporter; modDSXReporter.bas
Form=frmMDIMain.frm
Startup="Sub Main"
HelpFile=""
ExeName32="DSXReporter.exe"
Command32=""
Name="DSXReporter"
HelpContextID="0"
CompatibleMode="0"
MajorVer=1
MinorVer=0
RevisionVer=0
AutoIncrementVer=0
ServerSupportFiles=0
VersionCompanyName="mej"
CompilationType=0
OptimizationType=0
FavorPentiumPro(tm)=0
CodeViewDebugInfo=0
NoAliasing=0
BoundsCheck=0
OverflowCheck=0
FlPointCheck=0
FDIVCheck=0
UnroundedFP=0
StartMode=0
Unattended=0
Retained=0
ThreadPerObject=0
MaxNumberOfThreads=1

[MS Transaction Server]
AutoRefresh=1
!)(!
#TextEnd
/*
Some DSRs are designed to be used as MDI children
An MDI form is needed to instantiate these objects.
I am not certain if the name of the MDI form matters
but in the system I am working on now, all MDI forms 
are named frmMDIMain, so its hard to tell.
*/
#TextStart
cat >%ProjFolder%\dsr\frmMDIMain.frm <<'!)(!'
VERSION 5.00
Begin VB.MDIForm frmMDIMain 
   BackColor       =   &H8000000C&
   Caption         =   "MDIForm1"
   ClientHeight    =   3030
   ClientLeft      =   120
   ClientTop       =   450
   ClientWidth     =   4560
   LinkTopic       =   "MDIForm1"
   StartUpPosition =   3  'Windows Default
End
Attribute VB_Name = "frmMDIMain"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Explicit
!)(!
#TextEnd
]]></gmsl>
   
<Storage Action="Close" />
</gmBasic>