<DescriptionFile>
<library id="Language.std"
         name="gmRTL.GUI"
         location="%library%\gmRTL.GUI.dll"
         migName="gmRTL.GUI"
         assemblyname="gmRTL.GUI"
         type="LocalImport"
>
<class id="DriveListBox" parent="None" default="Drive" migStatus="OverrideUser" migName="DriveListBox" role="Control" >
   <property id="Name" type="String" status="InOut" />
   <property id="Index" type="Integer" status="InOut" />
   <property id="BackColor" type="OLE_COLOR" status="InOut" />
   <property id="ForeColor" type="OLE_COLOR" status="InOut" />
   <property id="Left" type="TwipsX" status="InOut" />
   <property id="Top" type="TwipsY" status="InOut" />
   <property id="Width" type="TwipsX" status="InOut" />
   <property id="Height" type="TwipsY" status="InOut" />
   <property id="Enabled" type="Boolean" status="InOut" />
   <property id="Visible" type="Boolean" status="InOut" />
   <property id="MousePointer" type="MousePointerConstants" status="InOut" />
   <property id="TabIndex" type="Integer" status="InOut" />
   <property id="Drive" type="String" status="InOut" />
   <property id="ListCount" type="Integer" status="InOut" />
   <property id="ListIndex" type="Integer" status="InOut" />
   <property id="List" type="Collection" status="InOut" />
   <property id="FontName" type="String" status="InOut" />
   <property id="FontSize" type="Single" status="GetSet" >
     <Get npram="1" migPattern="%1d.Font.Size" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </property>
   <property id="FontBold" type="Boolean" status="InOut" />
   <property id="FontItalic" type="Boolean" status="InOut" />
   <property id="FontStrikethru" type="Boolean" status="InOut" />
   <property id="FontUnderline" type="Boolean" status="InOut" />
   <property id="Parent" type="IdeControl" status="InOut" />
   <property id="DragMode" type="Integer" status="InOut" />
   <property id="DragIcon" type="FrxPicture" status="InOut" />
   <property id="TabStop" type="Boolean" status="InOut" />
   <property id="Tag" type="Variant" status="InOut" />
   <property id="hWnd" type="OLE_HANDLE" status="InOut" />
   <property id="HelpContextID" type="Integer" status="GetSet" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="InOut" />
   <property id="WhatsThisHelpID" type="Long" status="InOut" />
   <property id="Appearance" type="Integer" status="InOut" />
   <property id="Container" type="IdeControl" status="InOut" />
   <property id="ToolTipText" type="String" status="GetSet" >
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDropMode" type="Integer" status="InOut" />
   <property id="TopIndex" type="Integer" status="InOut" />
   <property id="CausesValidation" type="Boolean" status="InOut" />
   <method id="AddItem" type="Void" >
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" >
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" />
   <method id="SetFocus" type="Void" />
   <method id="OLEDrag" type="Void" />
   <method id="Refresh" type="Void" />
   <method id="ZOrder" type="Void" >
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" >
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" >
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" />
   <event id="Change" netName="SelectedIndexChanged" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="DragDrop" netHandler="System.Windows.Form.DragEventHandler"
          netArgs="System.Windows.Forms.DragEventArgs" >
      <argument id="Source" type="Control" status="ByVal"
           cshPattern="%1d = (System.Windows.Forms.Control)e.Data"
           vbnPattern="%1d = CType(e.Data,System.Windows.Forms.Control)" />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" >
      <argument id="Source" type="Control" status="ByVal"
           cshPattern="%1d = (System.Windows.Forms.Control)e.Data"
           vbnPattern="%1d = CType(e.Data,System.Windows.Forms.Control)" />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       >
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        >
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Val(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     >
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Scroll" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" >
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="DirListBox" parent="None" default="Name"  migStatus="OverrideUser" migName="DirListBox" role="Control" >
   <property id="Name" type="String" status="InOut" />
   <property id="Index" type="Integer" status="InOut" />
   <property id="BackColor" type="OLE_COLOR" status="InOut" />
   <property id="ForeColor" type="OLE_COLOR" status="InOut" />
   <property id="Left" type="TwipsX" status="InOut" />
   <property id="Top" type="TwipsY" status="InOut" />
   <property id="Width" type="TwipsX" status="InOut" />
   <property id="Height" type="TwipsY" status="InOut" />
   <property id="Enabled" type="Boolean" status="InOut" />
   <property id="Visible" type="Boolean" status="InOut" />
   <property id="MousePointer" type="MousePointerConstants" status="InOut" />
   <property id="TabIndex" type="Integer" status="InOut" />
   <property id="Path" type="String" status="InOut" />
   <property id="ListCount" type="Integer" status="InOut" />
   <property id="ListIndex" type="Integer" status="InOut" />
   <property id="List" type="Collection" status="InOut" />
   <property id="FontName" type="String" status="InOut" />
   <property id="FontSize" type="Single" status="GetSet" >
     <Get npram="1" migPattern="%1d.Font.Size" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </property>
   <property id="FontBold" type="Boolean" status="InOut" />
   <property id="FontItalic" type="Boolean" status="InOut" />
   <property id="FontStrikethru" type="Boolean" status="InOut" />
   <property id="FontUnderline" type="Boolean" status="InOut" />
   <property id="Parent" type="IdeControl" status="InOut" />
   <property id="DragMode" type="Integer" status="InOut" />
   <property id="DragIcon" type="FrxPicture" status="InOut" />
   <property id="TabStop" type="Boolean" status="InOut" />
   <property id="Tag" type="Variant" status="InOut" />
   <property id="hWnd" type="OLE_HANDLE" status="InOut" />
   <property id="HelpContextID" type="Integer" status="GetSet" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="InOut" />
   <property id="WhatsThisHelpID" type="Long" status="InOut" />
   <property id="Appearance" type="Integer" status="InOut" />
   <property id="Container" type="IdeControl" status="InOut" />
   <property id="ToolTipText" type="String" status="GetSet" >
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDragMode" type="Integer" status="InOut" />
   <property id="OLEDropMode" type="Integer" status="InOut" />
   <property id="TopIndex" type="Integer" status="InOut" />
   <property id="CausesValidation" type="Boolean" status="InOut" />
   <method id="AddItem" type="Void" >
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" >
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" />
   <method id="SetFocus" type="Void" />
   <method id="OLEDrag" type="Void" />
   <method id="Refresh" type="Void" />
   <method id="ZOrder" type="Void" >
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" >
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" >
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" />
   <event id="Change" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
          netArgs="System.Windows.Forms.DragEventArgs" >
      <argument id="Source" type="Control" status="ByVal"
           cshPattern="%1d = (System.Windows.Forms.Control)e.Data"
           vbnPattern="%1d = CType(e.Data,System.Windows.Forms.Control)" />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" >
      <argument id="Source" type="Control" status="ByVal"
           cshPattern="%1d = (System.Windows.Forms.Control)e.Data"
           vbnPattern="%1d = CType(e.Data,System.Windows.Forms.Control)" />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       >
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        >
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Val(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     >
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" >
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" >
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" >
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Scroll" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" >
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="FileListBox" parent="None" default="Name"  migStatus="OverrideUser" migName="FileListBox" role="Control" >
   <property id="Name" type="String" status="InOut" />
   <property id="Index" type="Integer" status="InOut" />
   <property id="BackColor" type="OLE_COLOR" status="InOut" />
   <property id="ForeColor" type="OLE_COLOR" status="InOut" />
   <property id="Left" type="TwipsX" status="InOut" />
   <property id="Top" type="TwipsY" status="InOut" />
   <property id="Width" type="TwipsX" status="InOut" />
   <property id="Height" type="TwipsY" status="InOut" />
   <property id="Enabled" type="Boolean" status="InOut" />
   <property id="Visible" type="Boolean" status="InOut" />
   <property id="MousePointer" type="MousePointerConstants" status="InOut" />
   <property id="TabIndex" type="Integer" status="InOut" />
   <property id="Path" type="String" status="InOut" />
   <property id="Pattern" type="String" status="InOut" />
   <property id="FileName" type="String" status="InOut" />
   <property id="Normal" type="Boolean" status="InOut" />
   <property id="ReadOnly" type="Boolean" status="InOut" />
   <property id="Archive" type="Boolean" status="InOut" />
   <property id="Hidden" type="Boolean" status="InOut" />
   <property id="System" type="Boolean" status="InOut" />
   <property id="ListCount" type="Integer" status="InOut" />
   <property id="ListIndex" type="Integer" status="InOut" />
   <property id="List" type="Collection" status="InOut" />
   <property id="FontName" type="String" status="InOut" />
   <property id="FontSize" type="Single" status="GetSet" >
     <Get npram="1" migPattern="%1d.Font.Size" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </property>
   <property id="FontBold" type="Boolean" status="InOut" />
   <property id="FontItalic" type="Boolean" status="InOut" />
   <property id="FontStrikethru" type="Boolean" status="InOut" />
   <property id="FontUnderline" type="Boolean" status="InOut" />
   <property id="Parent" type="IdeControl" status="InOut" />
   <property id="DragMode" type="Integer" status="InOut" />
   <property id="DragIcon" type="FrxPicture" status="InOut" />
   <property id="TabStop" type="Boolean" status="InOut" />
   <property id="Tag" type="Variant" status="InOut" />
   <property id="hWnd" type="OLE_HANDLE" status="InOut" />
   <property id="HelpContextID" type="Integer" status="GetSet" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="MultiSelect" type="MultiSelectStatus" status="InOut" />
   <property id="Selected" type="Boolean" status="InOut" />
   <property id="TopIndex" type="Integer" status="InOut" />
   <property id="MouseIcon" type="FrxPicture" status="GetSet" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="InOut" />
   <property id="WhatsThisHelpID" type="Long" status="InOut" />
   <property id="Appearance" type="Integer" status="InOut" />
   <property id="Container" type="IdeControl" status="InOut" />
   <property id="ToolTipText" type="String" status="GetSet" >
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDragMode" type="Integer" status="InOut" />
   <property id="OLEDropMode" type="Integer" status="InOut" />
   <property id="CausesValidation" type="Boolean" status="InOut" />
   <method id="AddItem" type="Void" >
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" >
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" />
   <method id="SetFocus" type="Void" />
   <method id="OLEDrag" type="Void" />
   <method id="Refresh" type="Void" />
   <method id="ZOrder" type="Void" >
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" >
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" >
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" />
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
          netArgs="System.Windows.Forms.DragEventArgs" >
      <argument id="Source" type="Control" status="ByVal"
           cshPattern="%1d = (System.Windows.Forms.Control)e.Data"
           vbnPattern="%1d = CType(e.Data,System.Windows.Forms.Control)" />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" >
      <argument id="Source" type="Control" status="ByVal"
           cshPattern="%1d = (System.Windows.Forms.Control)e.Data"
           vbnPattern="%1d = CType(e.Data,System.Windows.Forms.Control)" />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       >
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        >
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Val(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     >
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" >
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" >
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" >
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="PathChange" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="PatternChange" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" >
      <argument id="Data" type="Object" status="ByVal"
           cshPattern="%1d = (MSComctlLib.DataObject)e.Data"
           vbnPattern="%1d = e.Data" />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" >
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Scroll" netHandler="System.EventHandler" netArgs="EventArgs" />
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" >
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
</library>
</DescriptionFile>