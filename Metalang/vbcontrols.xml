<MetaLanguage>
<class id="ideControl" parent="None" default="Visible" opcode="IDE">
   <property id="Visible" type="Boolean" status="ByVal" opcode="IDE.0"/>
   <property id="Left" type="TwipsX" status="GetSet" opcode="IDE.1"/>
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="IDE.2"/>
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpb narg="2" code="Canvas.SetTop(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="_ExtentX" type="TwipsX" status="ByVal" opcode="IDE.3"/>
   <property id="_ExtentY" type="TwipsY" status="ByVal" opcode="IDE.4"/>
   <property id="_Version" type="Variant" status="ByVal" migStatus="Delete" migName="Version" opcode="IDE.5"/>
   <property id="Align" type="AlignConstants" status="GetSet" opcode="IDE.6"/>
   <pattern id="Align.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetAlign(%1d)" />
   </pattern>
   <pattern id="Align.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetAlign(%2d, %1d)\c" />
   </pattern>
   <property id="Height" type="TwipsY" status="GetSet" opcode="IDE.7"/>
   <pattern id="Height.Get" >
      <wpf narg="1" code="%1d.GetHeight()" />
      <all narg="1" code="%1d.Height" />
   </pattern>
   <pattern id="Height.Set" >
      <wpf narg="2" code="%2d.SetHeight(%1d)\c" />
      <all narg="2" code="%2d.Height = %1d\c" />
   </pattern>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="IDE.8"/>
   <property id="Width" type="TwipsX" status="GetSet" opcode="IDE.9"/>
   <pattern id="Width.Get" >
      <wpf narg="1" code="%1d.GetWidth()" />
      <all narg="1" code="%1d.Width" />
   </pattern>
   <pattern id="Width.Set" >
      <wpf narg="2" code="%2d.SetWidth(%1d)\c" />
      <all narg="2" code="%2d.Width = %1d\c" />
   </pattern>
   <property id="ShowPanels" type="Boolean" status="ByVal" opcode="IDE.12"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="IDE.14"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="IDE.15"/>
   <property id="Index" type="Integer" status="GetSet" opcode="IDE.16" />
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()"/>
   </pattern>
   <pattern id="Index.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetControlIndex(%2d, %1d)\c" />
   </pattern>
   <property id="Container" type="IdeControl" status="ByVal" opcode="IDE.21"/>
   <property id="Name" type="String" status="ByVal" opcode="IDE.22"/>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IDE.10"/>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IDE.11"/>
   <method id="Move" type="Void" migName="SetBounds" opcode="IDE.20">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="SetFocus" type="Void" migName="Focus" opcode="IDE.13"/>
   <method id="ZOrder" type="Void" opcode="IDE.17">
     <argument id="Position" type="Variant" status="ByVal" optional="%0%" />
   </method>
   <property id="Font" type="Font" status="ByVal" opcode="IDE.27"/>
   <pattern id="Font.Get" >
      <wpf narg="1" code="%1d.GetFontName()" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="Font.Set" >
      <wpf narg="2" code="%2d.SetFontName(%1d)\c" />
      <all narg="2" code="%2d.Font = %1d\c" />
   </pattern>
   <property id="FontName" type="String" status="GetSet" opcode="FOR.13" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.GetFontName()" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.SetFontName(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="FOR.15"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="FOR.16" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="FOR.17" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="FOR.18" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="ToolTipText" type="String" status="ByVal" opcode="IDE.28"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="IDE.29"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="IDE.30"/>
   <property id="ForeColor" type="OLE_COLOR" status="GetSet" opcode="IDE.31"/>
   <pattern id="ForeColor.Get" >
      <wpf narg="1" code="%1d.GetForeColor()" />
      <all narg="1" code="%1d.ForeColor" />
   </pattern>
   <pattern id="ForeColor.Set" >
      <wpf narg="2" code="%2d.SetForeColor(%1d)\c" />
      <all narg="2" code="%2d.ForeColor = %1d\c" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="GetSet" opcode="IDE.32"/>
   <pattern id="BackColor.Get" >
      <wpf narg="1" code="%1d.GetBackColor()" />
      <all narg="1" code="%1d.BackColor" />
   </pattern>
   <pattern id="BackColor.Set" >
      <wpf narg="2" code="%2d.SetBackColor(%1d)\c" />
      <all narg="2" code="%2d.BackColor = %1d\c" />
   </pattern>
   <property id="Text" type="String" status="GetSet" opcode="IDE.33"/>
   <pattern id="Text.Get" >
      <wpf narg="1" code="%1d.GetText()" />
      <all narg="1" code="%1d.Text" />
   </pattern>
   <pattern id="Text.Set" >
      <wpf narg="2" code="%2d.SetText(%1d)\c" />
      <all narg="2" code="%2d.Text = %1d\c" />
   </pattern>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="IDE.34"/>
   <property id="FontSize" type="Single" status="GetSet" opcode="IDE.35" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.GetFontSize()" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.SetFontSize(%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="Locked" type="Boolean" status="GetSet"  opcode="CBO.49" />
   <pattern id="Locked.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetLocked(%1d)" />
   </pattern>
   <pattern id="Locked.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetLocked(%2d, %1d)\c" />
   </pattern>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="IDE.37"/>
   <property id="Controls" type="ContainedControls" status="ByVal" opcode="IDE.38"/>
   <property id="Caption" type="String" status="ByVal" opcode="IDE.39"/>
   <method id="Refresh" type="Void" opcode="IDE.40"/>
   <property id="DataField" type="String" status="GetSet" opcode="LAB.33" />
   <pattern id="DataField.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataField(%1d)" />
   </pattern>
   <pattern id="DataField.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataField(%2d,%1d)\c" />
   </pattern>
   <property id="DataMember" type="String" status="GetSet" opcode="TXB.54" />
   <pattern id="DataMember.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataMember(%1d)" />
   </pattern>
   <pattern id="DataMember.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataMember(%2d,%1d)\c" />
   </pattern>
   <property id="DataSource" type="Variant" status="GetSet" opcode="LAB.46" />
   <pattern id="DataSource.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataSource(%1d)" />
   </pattern>
   <pattern id="DataSource.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataSource(%2d,%1d)\c" />
    </pattern>
   <property id="DragIcon" type="FrxPicture" status="GetSet" opcode="LAB.28" />
   <pattern id="DragIcon.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDragIcon(%1d)" />
   </pattern>
   <pattern id="DragIcon.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDragIcon(%2d,%1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="PBX.53" />
   <pattern id="DataChanged.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
   </pattern>
   <pattern id="DataChanged.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </pattern>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="PBX.50" />
   <pattern id="HelpContextID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
   </pattern>
   <pattern id="HelpContextID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleMode" type="ScaleModeConstants" status="GetSet" opcode="PBX.27" />
   <pattern id="ScaleMode.Get">
     <wpf narg="1" code="%1d.ScaleMode" />
     <all narg="1" code="gmRTL.GUI.ControlHelper.GetScaleMode(%1d)" />
   </pattern>
   <pattern id="ScaleMode.Set">
     <wpf narg="2" code="%2d.ScaleMode = %1d\c" />
     <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleMode(%2d,%1d)\c" />
   </pattern>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="PBX.56"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <method id="ShowWhatsThis" type="Void" opcode="TXB.70"/>
</class>
<class id="PictureBox" parent="None" default="Picture" opcode="PBX">
   <property id="Name" type="String" status="ByVal" opcode="PBX.1"/>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="PBX.2"/>
   <property id="Index" type="Integer" status="GetSet" opcode="PBX.3"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="PBX.4"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="PBX.5"/>
   <property id="Left" type="TwipsX" status="GetSet" opcode="PBX.6"/>
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="PBX.7"/>
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpb narg="2" code="Canvas.SetTop(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="ByVal" opcode="PBX.8"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="PBX.9"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="PBX.10"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="PBX.11"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="PBX.12"/>
   <property id="FontName" type="String" status="GetSet" opcode="PBX.13" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="PBX.14" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="PBX.15"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.FontBold" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.FontBold = %1d\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="PBX.16" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.FontItalic" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.FontItalic = %1d\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="PBX.17" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.FontStrikeout" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.FontStrikeout = %1d\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="PBX.18" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.FontUnderline" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.FontUnderline = %1d\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="PBX.19"/>
   <property id="hDC" type="OLE_HANDLE" status="ByVal" opcode="PBX.20"/>
   <property id="CurrentX" type="TwipsX" status="GetSet" opcode="PBX.21" />
   <pattern id="CurrentX.Get" >
      <wpf narg="1" code="%1d.CurrentX" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetCurrentX(%1d)" />
   </pattern>
   <pattern id="CurrentX.Set" >
      <wpf narg="2" code="%2d.CurrentX = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetCurrentX(%2d,%1d)\c" />
   </pattern>
   <property id="CurrentY" type="TwipsY" status="GetSet" opcode="PBX.22" />
   <pattern id="CurrentY.Get" >
      <wpf narg="1" code="%1d.CurrentY" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetCurrentY(%1d)" />
   </pattern>
   <pattern id="CurrentY.Set" >
      <wpf narg="2" code="%2d.CurrentY = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetCurrentY(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleLeft" type="TwipsX" status="GetSet" opcode="PBX.23" />
   <pattern id="ScaleLeft.Get" >
      <wpf narg="1" code="%1d.ScaleLeft" />
      <all narg="1" code="%1d.ClientRectangle.Left" />
   </pattern>
   <pattern id="ScaleLeft.Set" >
      <wpf narg="2" code="%2d.ScaleLeft = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleLeft(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleTop" type="TwipsY" status="GetSet" opcode="PBX.24" />
   <pattern id="ScaleTop.Get" >
      <wpf narg="1" code="%1d.ScaleTop" />
      <all narg="1" code="%1d.ClientRectangle.Top" />
   </pattern>
   <pattern id="ScaleTop.Set" >
      <wpf narg="2" code="%2d.ScaleTop = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleTop(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleWidth" type="TwipsX" status="ByVal" opcode="PBX.25"/>
   <property id="ScaleHeight" type="TwipsY" status="ByVal" opcode="PBX.26"/>
   <property id="ScaleMode" type="ScaleModeConstants" status="GetSet" opcode="PBX.27" />
   <pattern id="ScaleMode.Get">
     <wpf narg="1" code="%1d.ScaleMode" />
     <all narg="1" code="gmRTL.GUI.ControlHelper.GetScaleMode(%1d)" />
   </pattern>
   <pattern id="ScaleMode.Set">
     <wpf narg="2" code="%2d.ScaleMode = %1d\c" />
     <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleMode(%2d,%1d)\c" />
   </pattern>
   <property id="FontTransparent" type="Boolean" status="GetSet" opcode="PBX.28" />
   <pattern id="FontTransparent.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetFontTransparent(%1d)" />
   </pattern>
   <pattern id="FontTransparent.Set" >
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetTransparent(%2d.Font, %1d)\c" />
   </pattern>
   <property id="DrawStyle" type="DrawStyleConstants" status="GetSet" opcode="PBX.29" />
   <pattern id="DrawStyle.Get" >
      <wpf narg="1" code="%1d.DrawStyle" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDrawStyle(%1d)" />
   </pattern>
   <pattern id="DrawStyle.Set" >
      <wpf narg="2" code="%2d.DrawStyle = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDrawStyle(%2d,%1d)\c" />
   </pattern>
   <property id="DrawWidth" type="Integer" status="GetSet" opcode="PBX.30" />
   <pattern id="DrawWidth.Get" >
      <wpf narg="1" code="%1d.DrawWidth" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDrawWidth(%1d)" />
   </pattern>
   <pattern id="DrawWidth.Set" >
      <wpf narg="2" code="%2d.DrawWidth = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDrawWidth(%2d,%1d)\c" />
   </pattern>
   <property id="FillStyle" type="Integer" status="GetSet" opcode="PBX.31" />
   <pattern id="FillStyle.Get" >
      <wpf narg="1" code="%1d.FillStyle" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetFillStyle(%1d)" />
   </pattern>
   <pattern id="FillStyle.Set" >
      <wpf narg="2" code="%2d.FillStyle = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetFillStyle(%2d,%1d)\c" />
   </pattern>
   <property id="FillColor" type="OLE_COLOR" status="ByVal" opcode="PBX.32"/>
   <property id="DrawMode" type="Integer" status="GetSet" opcode="PBX.33" />
   <pattern id="DrawMode.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDrawMode(%1d)" />
   </pattern>
   <pattern id="DrawMode.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDrawMode(%2d,%1d)\c" />
   </pattern>
   <property id="AutoRedraw" type="Boolean" status="GetSet" opcode="PBX.34"/>
   <pattern id="AutoRedraw.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetAutoRedraw(%1d)" />
   </pattern>
   <pattern id="AutoRedraw.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetAutoRedraw(%2d,%1d)\c" />
   </pattern>
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="PBX.35"/>
   <property id="AutoSize" type="PictureBoxSizeMode" status="ByVal" opcode="PBX.36"/>
   <property id="BorderStyle" type="SimpleBorderStyle" status="ByVal" opcode="PBX.37"/>
   <property id="LinkTopic" type="String" status="ByVal" opcode="PBX.38"/>
   <property id="LinkItem" type="String" status="ByVal" opcode="PBX.39"/>
   <property id="LinkMode" type="Integer" status="ByVal" opcode="PBX.40"/>
   <property id="Image" type="FrxPicture" status="GetSet" opcode="PBX.41"/>
   <pattern id="Image.Get" >
      <all narg="1" status="postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetPaintedImage()" />
   </pattern>
   <pattern id="Image.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetPaintedImage(%2d,%1d)\c" />
   </pattern>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="PBX.42"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="PBX.43"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="PBX.44"/>
   <property id="LinkTimeout" type="Integer" status="ByVal" opcode="PBX.45"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="PBX.46"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="PBX.47"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="PBX.48"/>
   <property id="ClipControls" type="Boolean" status="ByVal" opcode="PBX.49"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="PBX.50" />
   <pattern id="HelpContextID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
   </pattern>
   <pattern id="HelpContextID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </pattern>
   <property id="Align" type="AlignConstants" status="GetSet" opcode="PBX.51" />
   <pattern id="Align.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetAlign(%1d)" />
   </pattern>
   <pattern id="Align.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetAlign(%2d, %1d)\c" />
   </pattern>
   <property id="DataField" type="String" status="GetSet" opcode="PBX.52" />
   <pattern id="DataField.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataField(%1d)" />
   </pattern>
   <pattern id="DataField.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataField(%2d,%1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="PBX.53" />
   <pattern id="DataChanged.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
   </pattern>
   <pattern id="DataChanged.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </pattern>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="PBX.54" />
   <pattern id="MouseIcon.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
   </pattern>
   <pattern id="MouseIcon.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </pattern>
   <property id="Font" type="Font" status="ByVal" opcode="PBX.55"/>
   <pattern id="Font.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="Font.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = %1d\c" />
   </pattern>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="PBX.56"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="SimpleBorderStyle" status="ByVal" opcode="PBX.57"/>
   <property id="Container" type="IdeControl" status="ByVal" opcode="PBX.58"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="PBX.59"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="PBX.60" />
   <pattern id="ToolTipText.Get" >
      <wpf narg="1" code="%1d.ToolTip" />
      <all narg="1" code="ToolTip1.GetToolTip(%1d)" />
   </pattern>
   <pattern id="ToolTipText.Set" >
      <wpf narg="2" code="%2d.ToolTip = %1d\c" />
      <all narg="2" code="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </pattern>
   <property id="OLEDragMode" type="Integer" status="ByVal" opcode="PBX.61"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="PBX.62"/>
   <property id="DataMember" type="String" status="ByVal" opcode="PBX.63"/>
   <property id="DataFormat" type="Object" status="ByVal" opcode="PBX.64"/>
   <property id="DataSource" type="Object" status="ByVal" opcode="PBX.65"/>
   <property id="HasDC" type="Boolean" status="ByVal" opcode="PBX.66"/>
   <method id="Drag" type="Void" opcode="PBX.67">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="LinkExecute" type="Void" opcode="PBX.68">
      <argument id="Command" type="String" status="ByVal"/>
   </method>
   <method id="LinkPoke" type="Void" opcode="PBX.69"/>
   <method id="LinkRequest" type="Void" opcode="PBX.70"/>
   <method id="LinkSend" type="Void" opcode="PBX.71"/>
   <method id="Refresh" type="Void" opcode="PBX.72"/>
   <method id="Move" type="Void" opcode="PBX.73">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="SetFocus" type="Void" opcode="PBX.74"/>
   <method id="ZOrder" type="Void" opcode="PBX.75">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Circle" type="Void" opcode="PBX.76">
      <argument id="Step" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="Radius" type="Single" status="ByVal"/>
      <argument id="Color" type="ole_color" status="ByVal" optional="2"/>
      <argument id="Start" type="Single" status="ByVal" optional="0"/>
      <argument id="End" type="Single" status="ByVal" optional="6.283185"/>
      <argument id="Aspect" type="Single" status="ByVal" optional="1"/>
   </method>
   <method id="Cls" type="Void" opcode="PBX.77"/>
   <method id="Line" type="Void" opcode="PBX.78" syntax="Line.0"/>
   <method id="PaintPicture" type="Void" opcode="PBX.79">
      <argument id="Picture" type="FrxPicture" status="ByVal"/>
      <argument id="X1" type="Single" status="ByVal"/>
      <argument id="Y1" type="Single" status="ByVal"/>
      <argument id="Width1" type="Variant" status="ByVal"/>
      <argument id="Height1" type="Variant" status="ByVal"/>
      <argument id="X2" type="Variant" status="ByVal"/>
      <argument id="Y2" type="Variant" status="ByVal"/>
      <argument id="Width2" type="Variant" status="ByVal"/>
      <argument id="Height2" type="Variant" status="ByVal"/>
      <argument id="Opcode" type="Variant" status="ByVal"/>
   </method>
   <method id="Point" type="Long" opcode="PBX.80">
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </method>
   <method id="PSet" type="Void" opcode="PBX.81" syntax="PSet.0"/>
   <method id="Scale" type="Void" opcode="PBX.82" syntax="Scale.115"/>
   <method id="ScaleX" type="Single" opcode="PBX.83">
      <argument id="Width" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="ScaleY" type="Single" opcode="PBX.84">
      <argument id="Height" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="TextWidth" type="Single" opcode="PBX.85">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="TextHeight" type="Single" opcode="PBX.86">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="PBX.87"/>
   <method id="OLEDrag" type="Void" opcode="PBX.88"/>
   <method id="Print" type="Void" opcode="PBX.116" syntax="Print.0"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.89"/>
   <event id="Change" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.90"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.91"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="PBX.92">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="PBX.93">
      <argument id="Source" type="Control" status="ByVal" />
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragOver.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragOver.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.94"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="PBX.95">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="PBX.96">
      <argument id="KeyAscii" type="Integer" status="ByVal" />
   </event>
   <pattern id="KeyPress.KeyAscii">
      <wpb nArg="1" code="%1d = e.Key" />
      <wpf nArg="1" code="%1d = (int)e.Key" />
      <csh nArg="1" code="%1d = (int)e.KeyChar" />
      <vbn nArg="1" code="%1d = Asc(e.KeyChar)" />
   </pattern>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="PBX.97">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LinkClose" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.98"/>
   <event id="LinkError" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.99">
      <argument id="LinkErr" type="Integer" status="ByVal"/>
   </event>
   <event id="LinkOpen" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.100">
      <argument id="Cancel" type="Integer" status="ByVal"/>
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.101"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="PBX.102">
      <argument id="Button" type="Integer" status="ByVal" />
      <argument id="Shift" type="Integer" status="ByVal" />
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="MouseDown.Button" >
      <wpf nArg="1" code="%1d = e.GetButtons()" />
      <csh nArg="1" code="%1d = (int)e.Button / 0x100000" />
      <vbn nArg="1" code="%1d = e.Button \ &H100000" />
   </pattern>
   <pattern id="MouseDown.Shift" >
      <csh nArg="1" code="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000" />
      <vbn nArg="1" code="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000" />
   </pattern>
   <pattern id="MouseDown.X">
      <wpf nArg="1" code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1" code="%1d = e.X" />
   </pattern>
   <pattern id="MouseDown.Y">
      <wpf nArg="1" code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1" code="%1d = e.Y" />
   </pattern>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="PBX.103">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal" />
      <argument id="Y" type="Single" status="ByVal" />
   </event>
   <pattern id="MouseMove.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="MouseMove.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="PBX.104">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal" />
      <argument id="Y" type="Single" status="ByVal" />
   </event>
   <pattern id="MouseUp.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="MouseUp.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="Paint" netHandler="System.Windows.Forms.PaintEventHandler" netArgs="System.Windows.Forms.PaintEventArgs" opcode="PBX.105"/>
   <event id="LinkNotify" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.106"/>
   <event id="Resize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.107"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.108">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.109">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.110">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.111">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.112">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PBX.113">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="PBX.114">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="Label" parent="None" default="Caption" opcode="LAB">
   <property id="Name" type="String" status="ByVal" opcode="LAB.1"/>
   <property id="Caption" type="String" status="GetSet" opcode="LAB.2"/>
   <pattern id="Caption.Get" >
      <wpf narg="1" code="%1d.Content.ToString()" />
      <all narg="1" code="%1d.Text" />
   </pattern>
   <pattern id="Caption.Set" >
      <wpf narg="2" code="%2d.Content = %1d\c" />
      <all narg="2" code="%2d.Text = %1d\c" />
   </pattern>
   <property id="Index" type="Integer" status="GetSet" opcode="LAB.3"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="GetSet" opcode="LAB.4"/>
   <pattern id="BackColor.Get" >
      <wpf narg="1" code="%1d.GetBackColor()" />
      <all narg="1" code="%1d.BackColor" />
   </pattern>
   <pattern id="BackColor.Set" >
      <wpf narg="2" code="%2d.SetBackColor(%1d)\c" />
      <all narg="2" code="%2d.BackColor = %1d\c" />
   </pattern>
   <property id="ForeColor" type="OLE_COLOR" status="GetSet" opcode="LAB.5"/>
   <pattern id="ForeColor.Get" >
      <wpf narg="1" code="%1d.GetForeColor()" />
      <all narg="1" code="%1d.ForeColor" />
   </pattern>
   <pattern id="ForeColor.Set" >
      <wpf narg="2" code="%2d.SetForeColor(%1d)\c" />
      <all narg="2" code="%2d.ForeColor = %1d\c" />
   </pattern>
   <property id="Left" type="TwipsX" status="GetSet" opcode="LAB.6"/>
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="LAB.7"/>
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpb narg="2" code="Canvas.SetTop(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="ByVal" opcode="LAB.8"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="LAB.9"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="LAB.10"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="LAB.11"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="LAB.12"/>
   <property id="FontName" type="String" status="GetSet" opcode="LAB.13" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="LAB.14" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="LAB.15"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="LAB.16" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="LAB.17" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="LAB.18" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="LAB.19"/>
   <property id="BorderStyle" type="SimpleBorderStyle" status="ByVal" opcode="LAB.20"/>
   <property id="Alignment" type="HorizontalAlignment" status="ByVal" opcode="LAB.21"/>
   <property id="LinkTopic" type="String" status="ByVal" opcode="LAB.22"/>
   <property id="LinkItem" type="String" status="ByVal" opcode="LAB.23"/>
   <property id="LinkMode" type="Integer" status="ByVal" opcode="LAB.24"/>
   <property id="AutoSize" type="Boolean" status="ByVal" opcode="LAB.25"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="LAB.26"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="LAB.27"/>
   <property id="DragIcon" type="FrxPicture" status="GetSet" opcode="LAB.28">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDragIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDragIcon(%2d,%1d)\c" />
   </property>
   <property id="LinkTimeout" type="Integer" status="ByVal" opcode="LAB.29"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="LAB.30"/>
   <property id="WordWrap" type="Boolean" status="GetSet" opcode="LAB.31" />
   <pattern id="WordWrap.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWordWrap(%1d)" />
   </pattern>
   <pattern id="WordWrap.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWordWrap(%2d, %1d)\c" />
   </pattern>
   <property id="BackStyle" type="BackStyleConstants" status="GetSet" opcode="LAB.32">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetBackStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetBackStyle(%2d,%1d)\c" />
   </property>
   <property id="DataField" type="String" status="GetSet" opcode="LAB.33" />
   <pattern id="DataField.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataField(%1d)" />
   </pattern>
   <pattern id="DataField.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataField(%2d,%1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="LAB.34" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="LAB.35">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="UseMnemonic" type="Boolean" status="ByVal" opcode="LAB.36"/>
   <property id="Font" type="Font" status="ByVal" opcode="LAB.37"/>
   <pattern id="Font.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="Font.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = %1d\c" />
   </pattern>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="LAB.38"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="GetSet" opcode="LAB.39">
      <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetAppearance(%1d)" />
      <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetAppearance(%2d,%1d)\c" />
   </property>
   <property id="Container" type="IdeControl" status="ByVal" opcode="LAB.40"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="LAB.41"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="LAB.42">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="LAB.43"/>
   <property id="DataMember" type="String" status="GetSet" opcode="LAB.44"/>
   <pattern id="DataMember.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataMember(%1d)" />
   </pattern>
   <pattern id="DataMember.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataMember(%2d,%1d)\c" />
   </pattern>
   <property id="DataFormat" type="Object" status="ByVal" opcode="LAB.45"/>
   <property id="DataSource" type="Variant" status="GetSet" opcode="LAB.46" />
   <pattern id="DataSource.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataSource(%1d)" />
   </pattern>
   <pattern id="DataSource.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataSource(%2d,%1d)\c" />
   </pattern>
   <method id="AddItem" type="Void" opcode="LAB.47">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%8%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="LAB.48">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="LAB.49"/>
   <method id="LinkExecute" type="Void" opcode="LAB.50">
      <argument id="Command" type="String" status="ByVal"/>
   </method>
   <method id="LinkPoke" type="Void" opcode="LAB.51"/>
   <method id="LinkRequest" type="Void" opcode="LAB.52"/>
   <method id="LinkSend" type="Void" opcode="LAB.53"/>
   <method id="OLEDrag" type="Void" opcode="LAB.54"/>
   <method id="Refresh" type="Void" opcode="LAB.55"/>
   <method id="ZOrder" type="Void" opcode="LAB.56">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="LAB.57">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="LAB.58">
      <argument id="Action" type="Variant" status="ByVal" optional="DEF.TypeMissing"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="LAB.59"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.60"/>
   <event id="Change" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.61"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.62"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="LAB.63">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="LAB.64">
      <argument id="Source" type="Control" status="ByVal" />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="LinkClose" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.65"/>
   <event id="LinkError" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.66">
      <argument id="LinkErr" type="Integer" status="ByVal"/>
   </event>
   <event id="LinkOpen" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.67">
      <argument id="Cancel" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="LAB.68">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="MouseDown.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="MouseDown.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="LAB.69">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="LAB.70">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="LinkNotify" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.71"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.72">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.73">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.74">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.75">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.76">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.77">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LAB.78"/>
</class>
<class id="TextBox" parent="None" default="Text" opcode="TXB">
   <property id="Name" type="String" status="ByVal" opcode="TXB.1"/>
   <property id="Index" type="Integer" status="GetSet" opcode="TXB.2"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="GetSet" opcode="TXB.3"/>
   <pattern id="BackColor.Get" >
      <wpf narg="1" code="%1d.GetBackColor()" />
      <all narg="1" code="%1d.BackColor" />
   </pattern>
   <pattern id="BackColor.Set" >
      <wpf narg="2" code="%2d.SetBackColor(%1d)\c" />
      <all narg="2" code="%2d.BackColor = %1d\c" />
   </pattern>
   <property id="ForeColor" type="OLE_COLOR" status="GetSet" opcode="TXB.4"/>
   <pattern id="ForeColor.Get" >
      <wpf narg="1" code="%1d.GetForeColor()" />
      <all narg="1" code="%1d.ForeColor" />
   </pattern>
   <pattern id="ForeColor.Set" >
      <wpf narg="2" code="%2d.SetForeColor(%1d)\c" />
      <all narg="2" code="%2d.ForeColor = %1d\c" />
   </pattern>
   <property id="Left" type="TwipsX" status="GetSet" opcode="TXB.5"/>
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="TXB.6"/>
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpb narg="2" code="Canvas.SetTop(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="ByVal" opcode="TXB.7"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="TXB.8"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="TXB.9"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="TXB.10"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="TXB.11"/>
   <property id="Text" type="String" status="ByVal" opcode="TXB.12"/>
   <property id="FontName" type="String" status="GetSet" opcode="TXB.13" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="TXB.14" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="TXB.15"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="TXB.16" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="TXB.17" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="TXB.18" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="TXB.19"/>
   <property id="BorderStyle" type="SimpleBorderStyle" status="ByVal" opcode="TXB.20"/>
   <property id="LinkTopic" type="String" status="ByVal" opcode="TXB.21"/>
   <property id="LinkItem" type="String" status="ByVal" opcode="TXB.22"/>
   <property id="LinkMode" type="Integer" status="ByVal" opcode="TXB.23"/>
   <property id="MultiLine" type="Boolean" status="ByVal" opcode="TXB.24"/>
   <property id="ScrollBars" type="ScrollBarConstants" status="ByVal" opcode="TXB.25"/>
   <property id="SelStart" type="Long" status="ByVal" opcode="TXB.26"/>
   <property id="SelLength" type="Long" status="ByVal" opcode="TXB.27"/>
   <property id="SelText" type="String" status="ByVal" opcode="TXB.28"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="TXB.29"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="TXB.30"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="TXB.31"/>
   <property id="LinkTimeout" type="Integer" status="ByVal" opcode="TXB.32"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="TXB.33"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="TXB.34"/>
   <property id="PasswordChar" type="Char" status="ByVal" opcode="TXB.35"/>
   <property id="HideSelection" type="Boolean" status="ByVal" opcode="TXB.36"/>
   <property id="Alignment" type="AlignmentConstants" status="ByVal" opcode="TXB.37"/>
   <property id="MaxLength" type="Long" status="ByVal" opcode="TXB.38"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="TXB.39">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="TXB.40"/>
   <property id="DataField" type="String" status="GetSet" opcode="TXB.41" />
   <pattern id="DataField.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataField(%1d)" />
   </pattern>
   <pattern id="DataField.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataField(%2d,%1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="TXB.42" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="TXB.43">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Locked" type="Boolean" status="ByVal" opcode="TXB.44"/>
   <property id="Font" type="Font" status="ByVal" opcode="TXB.45"/>
   <pattern id="Font.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="Font.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = %1d\c" />
   </pattern>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="TXB.46"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="GetSet" opcode="TXB.47">
      <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetAppearance(%1d)" />
      <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetAppearance(%2d,%1d)\c" />
   </property>
   <property id="Container" type="IdeControl" status="ByVal" opcode="TXB.48"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="TXB.49"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="TXB.50"/>
   <pattern id="ToolTipText.Get">
     <wpf narg="1" code="%1d.ToolTip" />
     <all narg="1" code="ToolTip1.GetToolTip(%1d)" />
   </pattern>
   <pattern id="ToolTipText.Set">
     <wpf narg="2" code="%2d.ToolTip = %1d\c" />
     <all narg="2" code="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </pattern>
   <property id="OLEDragMode" type="Integer" status="ByVal" opcode="TXB.51" migStatus="NotImplemented" />
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="TXB.52" migStatus="NotImplemented" />
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="TXB.53"/>
   <property id="DataMember" type="String" status="GetSet" opcode="TXB.54"/>
   <pattern id="DataMember.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataMember(%1d)" />
   </pattern>
   <pattern id="DataMember.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataMember(%2d,%1d)\c" />
   </pattern>
   <property id="DataFormat" type="Object" status="GetSet" opcode="TXB.55">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDataFormat(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDataFormat(%2d,%1d)\c" />
   </property>
   <property id="DataSource" type="Variant" status="GetSet" opcode="TXB.56" />
   <pattern id="DataSource.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataSource(%1d)" />
   </pattern>
   <pattern id="DataSource.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataSource(%2d,%1d)\c" />
   </pattern>
   <property id="AutoSize" type="Boolean" status="ByVal" opcode="TXB.95"/>
   <property id="IMEMode" type="IMEmodes" status="ByVal" opcode="TXB.96"/>
   <method id="AddItem" type="Void" opcode="TXB.57">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="TXB.58">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="TXB.59"/>
   <method id="SetFocus" type="Void" opcode="TXB.60"/>
   <method id="LinkExecute" type="Void" opcode="TXB.61">
      <argument id="Command" type="String" status="ByVal"/>
   </method>
   <method id="LinkPoke" type="Void" opcode="TXB.62"/>
   <method id="LinkRequest" type="Void" opcode="TXB.63"/>
   <method id="LinkSend" type="Void" opcode="TXB.64"/>
   <method id="OLEDrag" type="Void" opcode="TXB.65"/>
   <method id="Refresh" type="Void" opcode="TXB.66"/>
   <method id="ZOrder" type="Void" opcode="TXB.67">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="TXB.68">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="TXB.69">
      <argument id="Action" type="Variant" status="ByVal" optional="DEF.TypeMissing" />
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="TXB.70"/>
   <event id="Change" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.71"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="TXB.72">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="TXB.73">
      <argument id="Source" type="Control" status="ByVal" />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.74"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="TXB.75">
      <argument id="KeyCode" type="Integer" status="ByVal" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <pattern id="KeyDown.KeyCode">
      <wpf nArg="1" code="%1d = KeyInterop.VirtualKeyFromKey(e.Key)" />
      <all nArg="1" code="%1d = e.KeyValue" />
   </pattern>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="TXB.76">
      <argument id="KeyAscii" type="Integer" status="ByVal" />
   </event>
   <pattern id="KeyPress.KeyAscii">
      <wpb nArg="1" code="%1d = e.Key" />
      <wpf nArg="1" code="%1d = (int)e.Key" />
      <csh nArg="1" code="%1d = (int)e.KeyChar" />
      <vbn nArg="1" code="%1d = Asc(e.KeyChar)" />
   </pattern>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="TXB.77">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LinkClose" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.78"/>
   <event id="LinkError" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.79">
      <argument id="LinkErr" type="Integer" status="ByVal"/>
   </event>
   <event id="LinkOpen" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.80">
      <argument id="Cancel" type="Integer" status="ByVal"/>
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.81"/>
   <event id="LinkNotify" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.82"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="TXB.83">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="TXB.84">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="TXB.85">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.86"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.87"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.88">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.89">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.90">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.91">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.92">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TXB.93">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="TXB.94">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="Frame" parent="None" default="Caption" opcode="FRA">
   <property id="Name" type="String" status="ByVal" opcode="FRA.1"/>
   <property id="Caption" type="String" status="ByVal" opcode="FRA.2"/>
   <property id="Index" type="Integer" status="GetSet" opcode="FRA.3"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="FRA.4"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="FRA.5"/>
   <property id="Left" type="TwipsX" status="GetSet" opcode="FRA.6" />
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="FRA.7"/>
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpb narg="2" code="Canvas.SetTop(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="ByVal" opcode="FRA.8"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="FRA.9"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="FRA.10"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="FRA.11"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="FRA.12"/>

   <property id="FontName" type="String" status="GetSet" opcode="FRA.13" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="FRA.14" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="FRA.15"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="FRA.16" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="FRA.17" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="FRA.18" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="FRA.19"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="FRA.20"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="FRA.21"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="FRA.22"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="FRA.23"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="FRA.24"/>
   <property id="ClipControls" type="Boolean" status="ByVal" opcode="FRA.25"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="FRA.26">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="FRA.27">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="FRA.28"/>
   <pattern id="Font.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="Font.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = %1d\c" />
   </pattern>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="FRA.29"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="GetSet" opcode="FRA.30">
      <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetAppearance(%1d)" />
      <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetAppearance(%2d,%1d)\c" />
   </property>
   <property id="Container" type="IdeControl" status="ByVal" opcode="FRA.31"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="FRA.32"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="FRA.33">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="FRA.34"/>
   <property id="BorderStyle" type="DrawStyleConstants" status="GetSet" opcode="FRA.35" />
   <pattern id="BorderStyle.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDrawStyle(%1d)" />
   </pattern>
   <pattern id="BorderStyle.Set" >
      <vbn narg="2" code="gmRTL.GUI.ControlHelper.SetDrawStyle(%2d,%1d)\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDrawStyle(%2d,%1d)\c" />
   </pattern>
   <method id="AddItem" type="Void" opcode="FRA.36">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="FRA.37">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="FRA.38"/>
   <method id="OLEDrag" type="Void" opcode="FRA.39"/>
   <method id="Refresh" type="Void" opcode="FRA.40"/>
   <method id="ZOrder" type="Void" opcode="FRA.41">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="FRA.42">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="FRA.43">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="FRA.44"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
              netArgs="System.Windows.Forms.DragEventArgs" opcode="FRA.45">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="FRA.46">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="FRA.47">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="MouseDown.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="MouseDown.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="FRA.48">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal" />
      <argument id="Y" type="Single" status="ByVal" />
   </event>
   <pattern id="MouseMove.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="MouseMove.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="FRA.49">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal" />
      <argument id="Y" type="Single" status="ByVal" />
   </event>
   <pattern id="MouseUp.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="MouseUp.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FRA.50"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FRA.51"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FRA.52">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FRA.53">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FRA.54">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FRA.55">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FRA.56">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FRA.57">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
</class>
<class id="CommandButton" parent="None" default="Value" opcode="CMB">
   <property id="Name" type="String" status="ByVal" opcode="CMB.1"/>
   <property id="Caption" type="String" status="ByVal" opcode="CMB.2"/>
   <property id="Index" type="Integer" status="GetSet" opcode="CMB.3"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="CMB.4"/>
   <property id="Left" type="TwipsX" status="GetSet" opcode="CMB.5" />
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpf narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="CMB.6" />
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="ByVal" opcode="CMB.7"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="CMB.8"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="CMB.9"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="CMB.10"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="CMB.11"/>
   <property id="FontName" type="String" status="GetSet" opcode="CMB.12">
     <Get npram="1" migPattern="%1d.Font.Name" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </property>
   <property id="FontSize" type="Single" status="GetSet" opcode="CMB.13">
     <Get npram="1" migPattern="%1d.Font.Size" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </property>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="CMB.14">
     <Get npram="1" migPattern="%1d.Font.Bold" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font,%1d)\c" />
   </property>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="CMB.15">
     <Get npram="1" migPattern="%1d.Font.Italic" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font,%1d)\c" />
   </property>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="CMB.16">
      <Get npram="1" migPattern="%1d.Font.Strikeout" />
      <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </property>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="CMB.17">
      <Get npram="1" migPattern="%1d.Font.Underline" />
      <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font,%1d)\c" />
   </property>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="CMB.18"/>
   <property id="Value" type="Boolean" status="ByVal" opcode="CMB.19"/>
   <property id="Default" type="Boolean" status="ByVal" opcode="CMB.20"/>
   <property id="Cancel" type="Boolean" status="ByVal" opcode="CMB.21"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="CMB.22"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="CMB.23"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="CMB.24"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="CMB.25"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="CMB.26"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="CMB.27"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="CMB.28">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="CMB.29">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="CMB.30"/>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="CMB.31"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="ByVal" opcode="CMB.32"/>
   <property id="Container" type="IdeControl" status="ByVal" opcode="CMB.33"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="CMB.34"/>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="CMB.35"/>
   <property id="DisabledPicture" type="FrxPicture" status="GetSet" opcode="CMB.36"/>
   <pattern id="DisabledPicture.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDisabledPicture(%1d)" />
   </pattern>
   <pattern id="DisabledPicture.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDisabledPicture(%2d,%1d)\c" />
   </pattern>
   <property id="DownPicture" type="FrxPicture" status="GetSet" opcode="CMB.37"/>
   <pattern id="DownPicture.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDownPicture(%1d)" />
   </pattern>
   <pattern id="DownPicture.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDownPicture(%2d,%1d)\c" />
   </pattern>
   <property id="ToolTipText" type="String" status="GetSet" opcode="CMB.38">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="CMB.39"/>
   <property id="MaskColor" type="OLE_COLOR" status="ByVal" opcode="CMB.40" migStatus="NotImplemented"/>
   <property id="UseMaskColor" type="Boolean" status="GetSet" opcode="CMB.41"/>
   <pattern id="UseMaskColor.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetUseMaskColor(%1d)" />
   </pattern>
   <pattern id="UseMaskColor.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetUseMaskColor(%2d,%1d)\c" />
   </pattern>
   <property id="Style" type="Integer" status="ByVal" opcode="CMB.42" migStatus="NotImplemented" />
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="CMB.43"/>
   <method id="AddItem" type="Void" opcode="CMB.44">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="CMB.45">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="CMB.46"/>
   <method id="SetFocus" type="Void" opcode="CMB.47"/>
   <method id="OLEDrag" type="Void" opcode="CMB.48"/>
   <method id="Refresh" type="Void" opcode="CMB.49"/>
   <method id="ZOrder" type="Void" opcode="CMB.50">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="CMB.51">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="CMB.52">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="CMB.53"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.54"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
              netArgs="System.Windows.Forms.DragEventArgs" opcode="CMB.55">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="CMB.56">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.57"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="CMB.58">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="CMB.59">
      <argument id="KeyAscii" type="Integer" status="ByVal"/>
   </event>
   <pattern id="KeyPress.KeyAscii">
      <wpf nArg="1" code="%1d = KeyInterop.VirtualKeyFromKey(e.Key)" />
      <csh nArg="1" code="%1d = (int)e.KeyChar" />
      <vbn nArg="1" code="%1d = Asc(e.KeyChar)" />
   </pattern>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="CMB.60">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.61"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="CMB.62">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="CMB.63">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="CMB.64">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.65">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.66">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.67">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.68">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.69">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CMB.70">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
</class>
<class id="CheckBox" parent="None" default="Value" opcode="CBX">
   <property id="Name" type="String" status="ByVal" opcode="CBX.1"/>
   <property id="Caption" type="String" status="ByVal" opcode="CBX.2"/>
   <property id="Index" type="Integer" status="GetSet" opcode="CBX.3"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="CBX.4"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="CBX.5"/>
   <property id="Left" type="TwipsX" status="GetSet" opcode="CBX.6"/>
   <pattern id="Left.Get">
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set">
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
     </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="CBX.7"/>
   <pattern id="Top.Get">
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set">
      <wpb narg="2" code="Canvas.SetTop(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="ByVal" opcode="CBX.8"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="CBX.9"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="CBX.10"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="CBX.11"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="CBX.12"/>
   <property id="FontName" type="String" status="GetSet" opcode="CBX.13" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="CBX.14" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="CBX.15"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="CBX.16" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="CBX.17" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="CBX.18" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="CBX.19"/>
   <property id="Value" type="CheckBoxConstants" status="GetSet" opcode="CBX.20"/>
   <pattern id="Value.Get" >
      <wpf narg="1" code="%1d.IsChecked.Value" />
      <all narg="1" code="%1d.CheckState" />
   </pattern>
   <pattern id="Value.Set" >
      <wpf narg="2" code="%2d.IsChecked = %1d\c" />
      <all narg="2" code="%2d.CheckState = %1d\c" />
   </pattern>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="CBX.21"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="CBX.22"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="CBX.23"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="CBX.24"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="CBX.25"/>
   <property id="Alignment" type="HorizontalAlignment" status="ByVal" opcode="CBX.26"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="CBX.27">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="CBX.28"/>
   <property id="DataField" type="String" status="GetSet" opcode="CBX.29" />
   <pattern id="DataField.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataField(%1d)" />
   </pattern>
   <pattern id="DataField.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataField(%2d,%1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="CBX.30" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="CBX.31">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="CBX.32"/>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="CBX.33"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="GetSet" opcode="CBX.34">
      <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetAppearance(%1d)" />
      <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetAppearance(%2d,%1d)\c" />
   </property>
   <property id="Container" type="IdeControl" status="ByVal" opcode="CBX.35"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="CBX.36"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="CBX.37">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="CBX.38"/>
   <property id="DisabledPicture" type="FrxPicture" status="GetSet" opcode="CBX.39"/>
   <pattern id="DisabledPicture.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDisabledPicture(%1d)" />
   </pattern>
   <pattern id="DisabledPicture.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDisabledPicture(%2d,%1d)\c" />
   </pattern>
   <property id="DownPicture" type="FrxPicture" status="GetSet" opcode="CBX.40"/>
   <pattern id="DownPicture.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDownPicture(%1d)" />
   </pattern>
   <pattern id="DownPicture.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDownPicture(%2d,%1d)\c" />
   </pattern>
   <property id="Style" type="ButtonAppearanceStyle" status="ByVal" opcode="CBX.41"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="CBX.42"/>
   <property id="MaskColor" type="OLE_COLOR" status="ByVal" opcode="CBX.43" migStatus="NotImplemented"/>
   <property id="UseMaskColor" type="Boolean" status="GetSet" opcode="CBX.44"/>
   <pattern id="UseMaskColor.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetUseMaskColor(%1d)" />
   </pattern>
   <pattern id="UseMaskColor.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetUseMaskColor(%2d,%1d)\c" />
   </pattern>
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="CBX.45"/>
   <property id="DataMember" type="String" status="ByVal" opcode="CBX.46"/>
   <property id="DataFormat" type="Object" status="ByVal" opcode="CBX.47"/>
   <property id="DataSource" type="Object" status="ByVal" Status="GetSet" opcode="CBX.48"/>
   <pattern id="DataSource.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataSource(%1d)" />
    </pattern>
   <pattern id="DataSource.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataSource(%2d,%1d)\c" />
   </pattern>
   <method id="AddItem" type="Void" opcode="CBX.49">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="CBX.50">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="CBX.51"/>
   <method id="SetFocus" type="Void" opcode="CBX.52"/>
   <method id="OLEDrag" type="Void" opcode="CBX.53"/>
   <method id="Refresh" type="Void" opcode="CBX.54"/>
   <method id="ZOrder" type="Void" opcode="CBX.55">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="CBX.56">
     <argument id="Left" type="TwipsX" status="ByVal" />
     <argument id="Top" type="TwipsY" status="ByVal" optional="0" />
     <argument id="Width" type="TwipsX" status="ByVal" optional="0" />
     <argument id="Height" type="TwipsY" status="ByVal" optional="0" />
   </method>
   <method id="Drag" type="Void" opcode="CBX.57">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="CBX.58"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.59"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
              netArgs="System.Windows.Forms.DragEventArgs" opcode="CBX.60">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="CBX.61">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.62"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="CBX.63">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="CBX.64">
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Asc(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="CBX.65">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.66"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="CBX.67">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="CBX.68">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="CBX.69">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.70">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.71">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.72">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.73">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.74">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBX.75">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="CBX.76">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="OptionButton" parent="None" default="Value" opcode="OBU">
   <property id="Name" type="String" status="ByVal" opcode="OBU.1"/>
   <property id="Caption" type="String" status="GetSet" opcode="OBU.2" />
   <pattern id="Caption.Get" >
      <wpf narg="1" code="%1d.Content.ToString()" />
      <all narg="1" code="%1d.Text" />
   </pattern>
   <pattern id="Caption.Set" >
      <wpf narg="2" code="%2d.Content = %1d\c" />
      <all narg="2" code="%2d.Text = %1d\c" />
   </pattern>
   <property id="Index" type="Integer" status="GetSet" opcode="OBU.3"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="OBU.4"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="OBU.5"/>
   <property id="Left" type="TwipsX" status="GetSet" opcode="OBU.6" />
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="OBU.7" />
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="ByVal" opcode="OBU.8"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="OBU.9"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="OBU.10"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="OBU.11"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="OBU.12"/>
   <property id="FontName" type="String" status="GetSet" opcode="OBU.13" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="OBU.14" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="OBU.15"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="OBU.16" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="OBU.17" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="OBU.18" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="OBU.19"/>
   <property id="Value" type="Boolean" status="GetSet" opcode="OBU.20"/>
   <pattern id="Value.Get" >
      <wpf narg="1" code="%1d.IsChecked.Value" />
      <all narg="1" code="%1d.Checked" />
   </pattern>
   <pattern id="Value.Set" >
      <wpf narg="2" code="%2d.IsChecked = %1d\c" />
      <all narg="2" code="%2d.Checked = %1d\c" />
   </pattern>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="OBU.21"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="OBU.22"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="OBU.23"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="OBU.24"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="OBU.25"/>
   <property id="Alignment" type="HorizontalAlignment" status="ByVal" opcode="OBU.26"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="OBU.27">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="OBU.28"/>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="OBU.29">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="OBU.30"/>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="OBU.31"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="ByVal" opcode="OBU.32"/>
   <property id="Container" type="IdeControl" status="ByVal" opcode="OBU.33"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="OBU.34"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="OBU.35">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="OBU.36"/>
   <property id="DisabledPicture" type="FrxPicture" status="GetSet" opcode="OBU.37"/>
   <pattern id="DisabledPicture.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDisabledPicture(%1d)" />
   </pattern>
   <pattern id="DisabledPicture.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDisabledPicture(%2d,%1d)\c" />
   </pattern>
   <property id="DownPicture" type="FrxPicture" status="GetSet" opcode="OBU.38"/>
   <pattern id="DownPicture.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDownPicture(%1d)" />
   </pattern>
   <pattern id="DownPicture.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDownPicture(%2d,%1d)\c" />
   </pattern>
   <property id="Style" type="ButtonAppearanceStyle" status="ByVal" opcode="OBU.39"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="OBU.40"/>
   <property id="MaskColor" type="OLE_COLOR" status="ByVal" opcode="OBU.41" migStatus="NotImplemented"/>
   <property id="UseMaskColor" type="Boolean" status="GetSet" opcode="OBU.42"/>
   <pattern id="UseMaskColor.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetUseMaskColor(%1d)" />
   </pattern>
   <pattern id="UseMaskColor.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetUseMaskColor(%2d,%1d)\c" />
   </pattern>
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="OBU.43"/>
   <method id="AddItem" type="Void" opcode="OBU.44">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="OBU.45">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="OBU.46"/>
   <method id="SetFocus" type="Void" opcode="OBU.47"/>
   <method id="OLEDrag" type="Void" opcode="OBU.48"/>
   <method id="Refresh" type="Void" opcode="OBU.49"/>
   <method id="ZOrder" type="Void" opcode="OBU.50">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="OBU.51">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="OBU.52">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="OBU.53"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.54"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.55"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
              netArgs="System.Windows.Forms.DragEventArgs" opcode="OBU.56">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="OBU.57">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.58"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="OBU.59">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="OBU.60">
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Asc(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="OBU.61">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.62"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="OBU.63">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="OBU.64">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="OBU.65">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.66">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.67">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.68">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.69">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.70">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="OBU.71">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="OBU.72">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="ComboBox" parent="None" default="Text" opcode="CBO">
   <property id="Name" type="String" status="ByVal" opcode="CBO.1"/>
   <property id="Style" type="ComboBoxStyle" status="ByVal" opcode="CBO.2"/>
   <property id="Index" type="Integer" status="GetSet" opcode="CBO.3"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="CBO.4"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="CBO.5"/>
   <property id="Left" type="TwipsX" status="GetSet" opcode="CBO.6" />
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="CBO.7" />
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="ByVal" opcode="CBO.8"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="CBO.9"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="CBO.10"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="CBO.11"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="CBO.12"/>
   <property id="Text" type="String" status="ByVal" opcode="CBO.13"/>
   <property id="FontName" type="String" status="GetSet" opcode="CBO.14" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="CBO.15" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="CBO.16"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="CBO.17" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="CBO.18" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="CBO.19" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>

   <property id="TabIndex" type="Integer" status="ByVal" opcode="CBO.20"/>
   <property id="ListCount" type="Integer" status="ByVal" opcode="CBO.21"/>
   <property id="ListIndex" type="Integer" status="ByVal" opcode="CBO.22"/>
   <property id="List" type="Variant" status="Dimen" opcode="CBO.23"/>
   <property id="Sorted" type="Boolean" status="ByVal" opcode="CBO.24"/>
   <property id="SelStart" type="Long" status="ByVal" opcode="CBO.25"/>
   <property id="SelLength" type="Long" status="ByVal" opcode="CBO.26"/>
   <property id="SelText" type="String" status="ByVal" opcode="CBO.27"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="CBO.28"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="CBO.29"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="CBO.30"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="CBO.31"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="CBO.32"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="CBO.33"/>
   <property id="ItemData" type="Variant" status="Dimen" opcode="CBO.34"/>
   <property id="NewIndex" type="Integer" status="GetSet" opcode="CBO.35">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetNewIndex(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetNewIndex(%2d,%1d)\c" />
   </property>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="CBO.36">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="CBO.37">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="CBO.38"/>
   <property id="DataField" type="String" status="GetSet" opcode="CBO.39" />
   <pattern id="DataField.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataField(%1d)" />
   </pattern>
   <pattern id="DataField.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataField(%2d,%1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="CBO.40" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </property>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="CBO.41"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="ByVal" opcode="CBO.42"/>
   <property id="Container" type="IdeControl" status="ByVal" opcode="CBO.43"/>
   <property id="IntegralHeight" type="Boolean" status="ByVal" opcode="CBO.44"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="CBO.45"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="CBO.46">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDragMode" type="Integer" status="ByVal" opcode="CBO.47"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="CBO.48"/>
   <property id="Locked" type="Boolean" status="GetSet" opcode="CBO.49">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetLocked(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetLocked(%2d, %1d)\c" />
   </property>
   <property id="TopIndex" type="Integer" status="GetSet" opcode="CBO.50" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetTopIndex(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetTopIndex(%2d, %1d)\c" />
   </property>
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="CBO.51" />
   <property id="DataMember" type="String" status="ByVal" opcode="CBO.52"/>
   <property id="DataFormat" type="Object" status="ByVal" opcode="CBO.53"/>
   <property id="DataSource" type="Object" status="ByVal" opcode="CBO.54"/>
   <method id="Clear" type="Void" opcode="CBO.55"/>
   <method id="AddItem" type="Void" opcode="CBO.56">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="CBO.57">
      <argument id="Index" type="Integer" status="ByVal"/>
   </method>
   <method id="SetFocus" type="Void" opcode="CBO.58"/>
   <method id="Refresh" type="Void" opcode="CBO.59"/>
   <method id="ZOrder" type="Void" opcode="CBO.60">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Drag" type="Void" opcode="CBO.61">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="Move" type="Void" opcode="CBO.62">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="CBO.63"/>
   <method id="OLEDrag" type="Void" opcode="CBO.64"/>
   <event id="Change" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.65"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.66"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.67"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
              netArgs="System.Windows.Forms.DragEventArgs" opcode="CBO.68">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="CBO.69">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="DropDown" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.70"/>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.71"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="CBO.72">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="CBO.73">
      <argument id="KeyAscii" type="Integer" status="ByVal" />
   </event>
   <pattern id="KeyPress.KeyAscii">
      <wpf nArg="1" code="%1d = (int)e.Key" />
      <csh nArg="1" code="%1d = (int)e.KeyChar" />
      <vbn nArg="1" code="%1d = Asc(e.KeyChar)" />
   </pattern>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="CBO.74">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.75"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.76">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.77">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.78">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.79">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.80">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.81">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Scroll" netHandler="System.EventHandler" netArgs="EventArgs" opcode="CBO.82"/>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="CBO.83">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="ListBox" parent="None" default="Text" opcode="LSB">
   <property id="Name" type="String" status="ByVal" opcode="LSB.1"/>
   <property id="Index" type="Integer" status="GetSet" opcode="LSB.2"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="GetSet" opcode="LSB.3" />
   <pattern id="BackColor.Get" >
      <wpf narg="1" code="%1d.GetBackColor()" />
      <all narg="1" code="%1d.BackColor" />
   </pattern>
   <pattern id="BackColor.Set" >
      <wpf narg="2" code="%2d.SetBackColor(%1d)\c" />
      <all narg="2" code="%2d.BackColor = %1d\c" />
   </pattern>
   <property id="ForeColor" type="OLE_COLOR" status="GetSet" opcode="LSB.4" />
   <pattern id="ForeColor.Get" >
      <wpf narg="1" code="%1d.GetForeColor()" />
      <all narg="1" code="%1d.ForeColor" />
   </pattern>
   <pattern id="ForeColor.Set" >
      <wpf narg="2" code="%2d.SetForeColor(%1d)\c" />
      <all narg="2" code="%2d.ForeColor = %1d\c" />
   </pattern>
   <property id="Left" type="TwipsX" status="ByVal" opcode="LSB.5"/>
   <property id="Top" type="TwipsY" status="ByVal" opcode="LSB.6"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="LSB.7"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="LSB.8"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="LSB.9"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="LSB.10"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="LSB.11"/>
   <property id="FontName" type="String" status="GetSet" opcode="LSB.12" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="LSB.13" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="LSB.14"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="LSB.15" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="LSB.16" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="LSB.17" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>

   <property id="TabIndex" type="Integer" status="ByVal" opcode="LSB.18"/>
   <property id="ListCount" type="Integer" status="ByVal" opcode="LSB.19"/>
   <property id="ListIndex" type="Integer" status="ByVal" opcode="LSB.20"/>
   <property id="List" type="Variant" status="Dimen" opcode="LSB.21"/>
   <property id="Sorted" type="Boolean" status="ByVal" opcode="LSB.22"/>
   <property id="Text" type="String" status="ByVal" opcode="LSB.23"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="LSB.24"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="LSB.25"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="LSB.26"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="LSB.27"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="LSB.28"/>
   <property id="Columns" type="Integer" status="GetSet" opcode="LSB.29">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetColumns(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetColumns(%2d, %1d)\c" />
   </property>
   <property id="MultiSelect" type="MultiSelectStatus" status="ByVal" opcode="LSB.30"/>
   <property id="Selected" type="Boolean" status="GetSet" opcode="LSB.31"/>
   <property id="SelCount" type="Integer" status="ByVal" opcode="LSB.32"/>
   <property id="TopIndex" type="Integer" status="GetSet" opcode="LSB.33" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetTopIndex(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetTopIndex(%2d, %1d)\c" />
   </property>
   <property id="ItemData" type="Variant" status="Dimen" opcode="LSB.34"/>
   <property id="NewIndex" type="Integer" status="GetSet" opcode="LSB.35" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetNewIndex(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetNewIndex(%2d,%1d)\c" />
   </property>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="LSB.36">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="LSB.37"/>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="LSB.38">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="LSB.39"/>
   <property id="DataField" type="String" status="GetSet" opcode="LSB.40" />
   <pattern id="DataField.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataField(%1d)" />
   </pattern>
   <pattern id="DataField.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataField(%2d,%1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="LSB.41" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </property>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="LSB.42"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="ByVal" opcode="LSB.43"/>
   <property id="Container" type="IdeControl" status="ByVal" opcode="LSB.44"/>
   <property id="IntegralHeight" type="Boolean" status="ByVal" opcode="LSB.45"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="LSB.46"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="LSB.47">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDragMode" type="Integer" status="ByVal" opcode="LSB.48"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="LSB.49"/>
   <property id="Style" type="Integer" status="ByVal" opcode="LSB.50"/>
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="LSB.51"/>
   <property id="DataMember" type="String" status="ByVal" opcode="LSB.52"/>
   <property id="DataFormat" type="Object" status="ByVal" opcode="LSB.53"/>
   <property id="DataSource" type="Object" status="ByVal" opcode="LSB.54"/>
   <method id="Clear" type="Void" opcode="LSB.55"/>
   <method id="AddItem" type="Void" opcode="LSB.56">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="LSB.57">
      <argument id="Index" type="Integer" status="ByVal"/>
   </method>
   <method id="SetFocus" type="Void" opcode="LSB.58"/>
   <method id="Refresh" type="Void" opcode="LSB.59"/>
   <method id="ZOrder" type="Void" opcode="LSB.60">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Drag" type="Void" opcode="LSB.61">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="Move" type="Void" opcode="LSB.62">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="LSB.63"/>
   <method id="OLEDrag" type="Void" opcode="LSB.64"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.65"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.66"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
          netArgs="System.Windows.Forms.DragEventArgs" opcode="LSB.67">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="LSB.68">
      <argument id="Source" type="Control" status="ByVal" />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.69"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="LSB.70">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="LSB.71">
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Asc(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="LSB.72">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.73"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="LSB.74">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="LSB.75">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="LSB.76">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.77">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.78">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.79">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.80">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.81">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.82">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="Scroll" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.83"/>
   <event id="ItemCheck" netHandler="System.EventHandler" netArgs="EventArgs" opcode="LSB.84">
      <argument id="Item" type="Integer" status="ByVal"/>
   </event>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="LSB.85">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="HScrollBar" parent="None" default="Value" opcode="HBR">
   <property id="Name" type="String" status="ByVal" opcode="HBR.1"/>
   <property id="Index" type="Integer" status="ByVal" opcode="HBR.2"/>
   <property id="Left" type="TwipsX" status="GetSet" opcode="HBR.3" />
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="HBR.4" />
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="GetSet" opcode="HBR.5"/>
   <pattern id="Width.Get" >
      <wpf narg="1" code="%1d.GetWidth()" />
      <all narg="1" code="%1d.Width" />
   </pattern>
   <pattern id="Width.Set" >
      <wpf narg="2" code="%2d.SetWidth(%1d)\c" />
      <all narg="2" code="%2d.Width = %1d\c" />
   </pattern>
   <property id="Height" type="TwipsY" status="GetSet" opcode="HBR.6"/>
   <pattern id="Height.Get" >
      <wpf narg="1" code="%1d.GetHeight()" />
      <all narg="1" code="%1d.Height" />
   </pattern>
   <pattern id="Height.Set" >
      <wpf narg="2" code="%2d.SetHeight(%1d)\c" />
      <all narg="2" code="%2d.Height = %1d\c" />
   </pattern>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="HBR.7"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="HBR.8"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="HBR.9"/>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="HBR.10"/>
   <property id="Min" type="Integer" status="ByVal" opcode="HBR.11"/>
   <property id="Max" type="Integer" status="ByVal" opcode="HBR.12"/>
   <property id="SmallChange" type="Integer" status="ByVal" opcode="HBR.13"/>
   <property id="LargeChange" type="Integer" status="ByVal" opcode="HBR.14"/>
   <property id="Value" type="Integer" status="ByVal" opcode="HBR.15"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="HBR.16"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="HBR.17"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="HBR.18"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="HBR.19"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="HBR.20"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="HBR.21"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="HBR.22">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="HBR.23">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="HBR.24"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Container" type="IdeControl" status="ByVal" opcode="HBR.25"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="HBR.26"/>
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="HBR.27"/>
   <method id="AddItem" type="Void" opcode="HBR.28">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="HBR.29">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="HBR.30"/>
   <method id="SetFocus" type="Void" opcode="HBR.31"/>
   <method id="Refresh" type="Void" opcode="HBR.32"/>
   <method id="ZOrder" type="Void" opcode="HBR.33">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="HBR.34">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="HBR.35">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="HBR.36"/>
   <event id="Change" netHandler="System.EventHandler" netArgs="EventArgs" opcode="HBR.37"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
              netArgs="System.Windows.Forms.DragEventArgs" opcode="HBR.38">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="HBR.39">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="HBR.40"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="HBR.41">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="HBR.42">
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Asc(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="HBR.43">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="HBR.44"/>
   <event id="Scroll" netHandler="System.Windows.Forms.ScrollEventHandler"
           netArgs="System.Windows.Forms.ScrollEventArgs(ScrollEventType.SmallIncrement,0)" opcode="HBR.45"/>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="HBR.46">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="VScrollBar" parent="None" default="Value" opcode="VBR">
   <property id="Name" type="String" status="ByVal" opcode="VBR.1"/>
   <property id="Index" type="Integer" status="GetSet" opcode="VBR.2"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()"/>
   </pattern>
   <property id="Left" type="TwipsX" status="GetSet" opcode="VBR.3" />
   <pattern id="Left.Get" >
      <wpb narg="1" code="Canvas.GetLeft(%1d)" />
      <wpf narg="1" code="(int)Canvas.GetLeft(%1d)" />
      <all narg="1" code="%1d.Left" />
   </pattern>
   <pattern id="Left.Set" >
      <wpb narg="2" code="Canvas.SetLeft(%2d,%1d)\c" />
      <wpf narg="2" code="Canvas.SetLeft(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Left = %1d\c" />
   </pattern>
   <property id="Top" type="TwipsY" status="GetSet" opcode="VBR.4" />
   <pattern id="Top.Get" >
      <wpb narg="1" code="Canvas.GetTop(%1d)" />
      <wpf narg="1" code="Canvas.GetTop(%1d)" />
      <all narg="1" code="%1d.Top" />
   </pattern>
   <pattern id="Top.Set" >
      <wpf narg="2" code="Canvas.SetTop(%2d,(double)(%1d))\c" />
      <all narg="2" code="%2d.Top = %1d\c" />
   </pattern>
   <property id="Width" type="TwipsX" status="GetSet" opcode="VBR.5"/>
   <pattern id="Width.Get" >
      <wpf narg="1" code="%1d.GetWidth()" />
      <all narg="1" code="%1d.Width" />
   </pattern>
   <pattern id="Width.Set" >
      <wpf narg="2" code="%2d.SetWidth(%1d)\c" />
      <all narg="2" code="%2d.Width = %1d\c" />
   </pattern>
   <property id="Height" type="TwipsY" status="GetSet" opcode="VBR.6"/>
   <pattern id="Height.Get" >
      <wpf narg="1" code="%1d.GetHeight()" />
      <all narg="1" code="%1d.Height" />
   </pattern>
   <pattern id="Height.Set" >
      <wpf narg="2" code="%2d.SetHeight(%1d)\c" />
      <all narg="2" code="%2d.Height = %1d\c" />
   </pattern>

   <property id="Enabled" type="Boolean" status="ByVal" opcode="VBR.7"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="VBR.8"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="VBR.9"/>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="VBR.10"/>
   <property id="Min" type="Integer" status="ByVal" opcode="VBR.11"/>
   <property id="Max" type="Integer" status="ByVal" opcode="VBR.12"/>
   <property id="SmallChange" type="Integer" status="ByVal" opcode="VBR.13"/>
   <property id="LargeChange" type="Integer" status="ByVal" opcode="VBR.14"/>
   <property id="Value" type="Integer" status="ByVal" opcode="VBR.15"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="VBR.16"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="VBR.17"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="VBR.18"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="VBR.19"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="VBR.20"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="VBR.21"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="VBR.22">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="VBR.23">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="VBR.24"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Container" type="IdeControl" status="ByVal" opcode="VBR.25"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="VBR.26"/>
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="VBR.27"/>
   <method id="AddItem" type="Void" opcode="VBR.28">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="VBR.29">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="VBR.30"/>
   <method id="SetFocus" type="Void" opcode="VBR.31"/>
   <method id="Refresh" type="Void" opcode="VBR.32"/>
   <method id="ZOrder" type="Void" opcode="VBR.33">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="VBR.34">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="VBR.35">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="VBR.36"/>
   <event id="Change" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VBR.37"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
              netArgs="System.Windows.Forms.DragEventArgs" opcode="VBR.38">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="VBR.39">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VBR.40"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="VBR.41">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="VBR.42">
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Asc(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="VBR.43">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VBR.44"/>
   <event id="Scroll" netHandler="System.Windows.Forms.ScrollEventHandler"
           netArgs="System.Windows.Forms.ScrollEventArgs(ScrollEventType.SmallIncrement,0)" opcode="VBR.45"/>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="VBR.46">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
</class>
<class id="Timer" parent="None" default="Enabled" opcode="TIM">
   <property id="Name" type="String" status="ByVal" opcode="TIM.1"/>
   <property id="Index" type="Integer" status="GetSet" opcode="TIM.2"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="TIM.3"/>
   <property id="Interval" type="Long" status="GetSet" opcode="TIM.4"/>
   <pattern id="Interval.Get" >
      <wpf narg="1" code="%1d.Interval.Milliseconds" />
      <all narg="1" code="%1d.Interval" />
   </pattern>
   <pattern id="Interval.Set" >
      <wpf narg="2" code="%2d.Interval = new TimeSpan(0,0,0,0,%1d)\c" />
      <all narg="2" code="%2d.Interval = %1d\c" />
   </pattern>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="TIM.5"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="TIM.6"/>
   <property id="Left" type="Single" status="ByVal" opcode="TIM.7"/>
   <property id="Top" type="Single" status="ByVal" opcode="TIM.8"/>
   <method id="AddItem" type="Void" opcode="TIM.9">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="TIM.10">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="TIM.11"/>
   <event id="Timer" netHandler="System.EventHandler" netArgs="EventArgs" opcode="TIM.12"/>
</class>
<class id="Printer" parent="None" default="Height" opcode="PRN">
   <property id="Width" type="Long" status="ByVal" opcode="PRN.0"/>
   <property id="Height" type="Long" status="ByVal" opcode="PRN.1"/>
   <property id="FontName" type="String" status="GetSet" opcode="PRN.2" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="PRN.3" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="PRN.4"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.FontBold" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.FontBold = %1d\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="PRN.5" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.FontItalic" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.FontItalic = %1d\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="PRN.6" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.FontStrikeout" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.FontStrikeout = %1d\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="PRN.7" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.FontUnderline" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.FontUnderline = %1d\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="hDC" type="OLE_HANDLE" status="ByVal" opcode="PRN.8"/>
   <property id="CurrentX" type="TwipsX" status="ByVal" opcode="PRN.9"/>
   <property id="CurrentY" type="TwipsY" status="ByVal" opcode="PRN.10"/>
   <property id="ScaleLeft" type="TwipsX" status="ByVal" opcode="PRN.11" />
   <property id="ScaleTop" type="TwipsY" status="ByVal" opcode="PRN.12" />
   <property id="ScaleWidth" type="TwipsX" status="ByVal" opcode="PRN.13"/>
   <property id="ScaleHeight" type="TwipsY" status="ByVal" opcode="PRN.14"/>
   <property id="ScaleMode" type="ScaleModeConstants" status="ByVal" opcode="PRN.15" />
   <property id="FontTransparent" type="Boolean" status="GetSet" opcode="PRN.16" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFontTransparent(%1d)" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetTransparent(%2d.Font, %1d)\c" />
   </property>
   <property id="DrawStyle" type="Integer" status="ByVal" opcode="PRN.17"/>
   <property id="DrawWidth" type="Integer" status="ByVal" opcode="PRN.18"/>
   <property id="FillStyle" type="Integer" status="GetSet" opcode="PRN.19" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFillStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetFillStyle(%2d,%1d)\c" />
   </property>
   <property id="FillColor" type="OLE_COLOR" status="ByVal" opcode="PRN.20"/>
   <property id="DrawMode" type="DrawModeConstants" status="ByVal" opcode="PRN.21"/>
   <property id="Page" type="Integer" status="ByVal" opcode="PRN.22"/>
   <property id="FontCount" type="Integer" status="ByVal" opcode="PRN.23"/>
   <property id="Fonts" type="String[]" status="ByVal" opcode="PRN.24"/>
   <property id="TwipsPerPixelX" type="Single" status="ByVal" opcode="PRN.25"/>
   <property id="TwipsPerPixelY" type="Single" status="ByVal" opcode="PRN.26"/>
   <property id="DeviceName" type="String" status="ByVal" opcode="PRN.27"/>
   <property id="DriverName" type="String" status="ByVal" opcode="PRN.28"/>
   <property id="Port" type="String" status="ByVal" opcode="PRN.29"/>
   <property id="Orientation" type="Short" status="ByVal" opcode="PRN.30"/>
   <property id="PaperSize" type="Short" status="ByVal" opcode="PRN.31"/>
   <property id="PaperWidth" type="Short" status="ByVal" opcode="PRN.58"/>
   <property id="Zoom" type="Long" status="ByVal" opcode="PRN.32"/>
   <property id="Copies" type="Integer" status="ByVal" opcode="PRN.33"/>
   <property id="PaperBin" type="Integer" status="ByVal" opcode="PRN.34"/>
   <property id="ColorMode" type="Integer" status="ByVal" opcode="PRN.35"/>
   <property id="Duplex" type="Integer" status="ByVal" opcode="PRN.36"/>
   <property id="TrackDefault" type="Boolean" status="ByVal" opcode="PRN.37"/>
   <property id="PrintQuality" type="Integer" status="ByVal" opcode="PRN.38"/>
   <property id="Font" type="Font" status="ByVal" opcode="PRN.39"/>
   <pattern id="Font.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="Font.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = %1d\c" />
   </pattern>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="PRN.40"/>
   <property id="ForeColor" type="Long" status="ByVal" opcode="PRN.41"/>
   <method id="EndDoc" type="Void" opcode="PRN.42"/>
   <method id="NewPage" type="Void" opcode="PRN.43"/>
   <method id="KillDoc" type="Void" opcode="PRN.44"/>
   <method id="Circle" type="Void" opcode="PRN.45">
      <argument id="Step" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="Radius" type="Single" status="ByVal"/>
      <argument id="Color" type="ole_color" status="ByVal" optional="2"/>
      <argument id="Start" type="Single" status="ByVal" optional="0"/>
      <argument id="End" type="Single" status="ByVal" optional="6.283185"/>
      <argument id="Aspect" type="Single" status="ByVal" optional="1"/>
   </method>
   <method id="Line" type="Void" opcode="PRN.46" syntax="Line.0"/>
   <method id="PaintPicture" type="Void" opcode="PRN.47">
      <argument id="Picture" type="FrxPicture" status="ByVal"/>
      <argument id="X1" type="Single" status="ByVal"/>
      <argument id="Y1" type="Single" status="ByVal"/>
      <argument id="Width1" type="Single" status="ByVal"/>
      <argument id="Height1" type="Single" status="ByVal"/>
      <argument id="X2" type="Single" status="ByVal"/>
      <argument id="Y2" type="Single" status="ByVal"/>
      <argument id="Width2" type="Single" status="ByVal"/>
      <argument id="Height2" type="Single" status="ByVal"/>
   </method>
   <method id="PSet" type="Void" opcode="PRN.48" syntax="PSet.0"/>
   <method id="Scale" type="Void" opcode="PRN.49" syntax="Scale.54"/>
   <method id="ScaleX" type="Single" opcode="PRN.50">
      <argument id="Width" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="ScaleY" type="Single" opcode="PRN.51">
      <argument id="Height" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="TextWidth" type="Single" opcode="PRN.52">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="TextHeight" type="Single" opcode="PRN.53">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="Print" type="Void" opcode="PRN.54" syntax="Print.0"/>
</class>
<class id="Form" parent="None" default="Controls" opcode="FOR">
   <property id="Name" type="String" status="ByVal" opcode="FOR.1"/>
   <property id="Caption" type="String" status="ByVal" opcode="FOR.2"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="FOR.3"/>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="FOR.4"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="FOR.5"/>
   <property id="Left" type="TwipsX" status="ByVal" opcode="FOR.6"/>
   <property id="Top" type="TwipsY" status="ByVal" opcode="FOR.7"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="FOR.8"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="FOR.9"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="FOR.10"/>
   <property id="WindowState" type="FormWindowStateConstants" status="ByVal" opcode="FOR.11"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="FOR.12"/>
   <property id="FontName" type="String" status="GetSet" opcode="FOR.13" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="FOR.14" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="FOR.15"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="FOR.16" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="FOR.17" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="FOR.18" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="hDC" type="OLE_HANDLE" status="ByVal" opcode="FOR.19"/>
   <property id="CurrentX" type="TwipsX" status="GetSet" opcode="FOR.20"/>
   <pattern id="CurrentX.Get" >
      <wpf narg="1" code="%1d.CurrentX" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetCurrentX(%1d)" />
   </pattern>
   <pattern id="CurrentX.Set" >
      <wpf narg="2" code="%2d.CurrentX = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetCurrentX(%2d,%1d)\c" />
   </pattern>
   <property id="CurrentY" type="TwipsY" status="GetSet" opcode="FOR.21"/>
   <pattern id="CurrentY.Get" >
      <wpf narg="1" code="%1d.CurrentY" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetCurrentY(%1d)" />
   </pattern>
   <pattern id="CurrentY.Set" >
       <wpf narg="2" code="%2d.CurrentY = %1d\c" />
       <all narg="2" code="gmRTL.GUI.ControlHelper.SetCurrentY(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleLeft" type="TwipsX" status="GetSet" opcode="FOR.22" />
   <pattern id="ScaleLeft.Get" >
      <wpf narg="1" code="%1d.ScaleLeft" />
      <all narg="1" code="%1d.ClientRectangle.Left" />
   </pattern>
   <pattern id="ScaleLeft.Set" >
      <wpf narg="1" code="%2d.ScaleLeft = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleLeft(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleTop" type="TwipsY" status="GetSet" opcode="FOR.23" />
   <pattern id="ScaleTop.Get" >
      <wpf narg="1" code="%1d.ScaleTop" />
      <all narg="1" code="%1d.ClientRectangle.Top" />
   </pattern>
   <pattern id="ScaleTop.Set" >
      <wpf narg="1" code="%2d.ScaleTop = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleTop(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleWidth" type="TwipsX" status="ByVal" opcode="FOR.24" />
   <property id="ScaleHeight" type="TwipsY" status="ByVal" opcode="FOR.25" />
   <property id="ScaleMode" type="ScaleModeConstants" status="GetSet" opcode="FOR.26" />
   <pattern id="ScaleMode.Get">
     <wpf narg="1" code="%1d.ScaleMode" />
     <all narg="1" code="gmRTL.GUI.ControlHelper.GetScaleMode(%1d)" />
   </pattern>
   <pattern id="ScaleMode.Set">
     <wpf narg="2" code="%2d.ScaleMode = %1d\c" />
     <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleMode(%2d,%1d)\c" />
   </pattern>
   <property id="FontTransparent" type="Boolean" status="GetSet" opcode="FOR.27" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFontTransparent(%1d)" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetTransparent(%2d.Font, %1d)\c" />
   </property>
   <property id="DrawStyle" type="DrawStyleConstants" status="GetSet" opcode="FOR.28">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDrawStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDrawStyle(%2d,%1d)\c" />
   </property>
   <property id="DrawWidth" type="Integer" status="GetSet" opcode="FOR.29" />
   <pattern id="DrawWidth.Get" >
      <wpf narg="1" code="%1d.DrawWidth" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDrawWidth(%1d)" />
   </pattern>
   <pattern id="DrawWidth.Set" >
      <wpf narg="2" code="%2d.DrawWidth = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDrawWidth(%2d,%1d)\c" />
   </pattern>
   <property id="FillStyle" type="Integer" status="GetSet" opcode="FOR.30" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFillStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetFillStyle(%2d,%1d)\c" />
   </property>
   <property id="FillColor" type="OLE_COLOR" status="ByVal" opcode="FOR.31"/>
   <property id="DrawMode" type="Integer" status="ByVal" opcode="FOR.32"/>
   <property id="AutoRedraw" type="Boolean" status="GetSet" opcode="FOR.33"/>
   <pattern id="AutoRedraw.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetAutoRedraw(%1d)" />
   </pattern>
   <pattern id="AutoRedraw.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetAutoRedraw(%2d,%1d)\c" />
   </pattern>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="FOR.34"/>
   <property id="BorderStyle" type="FormBorderStyleConstants" status="ByVal" opcode="FOR.35"/>
   <property id="Icon" type="Icon" status="ByVal" opcode="FOR.36"/>
   <property id="LinkTopic" type="String" status="ByVal" opcode="FOR.37"/>
   <property id="LinkMode" type="Integer" status="ByVal" opcode="FOR.38"/>
   <property id="MaxButton" type="Boolean" status="ByVal" opcode="FOR.39"/>
   <property id="MinButton" type="Boolean" status="ByVal" opcode="FOR.40"/>
   <property id="ControlBox" type="Boolean" status="ByVal" opcode="FOR.41"/>
   <property id="Image" type="FrxPicture" status="ByVal" opcode="FOR.42" migStatus="NotImplemented" />
   <property id="HasDC" type="Boolean" status="ByVal" opcode="FOR.43"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="FOR.44"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="FOR.45"/>
   <property id="MDIChild" type="Boolean" status="ByVal" opcode="FOR.46"/>
   <property id="KeyPreview" type="Boolean" status="ByVal" opcode="FOR.47"/>
   <property id="ClipControls" type="Boolean" status="ByVal" opcode="FOR.48"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="FOR.49">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="ActiveControl" type="IdeControl" status="ByVal" opcode="FOR.50"/>
   <property id="Count" type="Integer" status="ByVal" opcode="FOR.51"/>
   <property id="Controls" type="ContainedControls" status="ByVal" opcode="FOR.52"/>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="FOR.53">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="FOR.54"/>
   <property id="Appearance" type="Integer" status="GetSet" opcode="FOR.55">
      <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetAppearance(%1d)" />
      <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetAppearance(%2d,%1d)\c" />
   </property>
   <property id="WhatsThisButton" type="Boolean" status="ByVal" opcode="FOR.56"/>
   <property id="WhatsThisHelp" type="Boolean" status="ByVal" opcode="FOR.57"/>
   <property id="ShowInTaskbar" type="Boolean" status="ByVal" opcode="FOR.58"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="FOR.59"/>
   <property id="StartUpPosition" type="StartupPositionConstants" status="ByVal" opcode="FOR.60"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="FOR.61"/>
   <property id="Palette" type="FrxPicture" status="ByVal" opcode="FOR.62"/>
   <property id="PaletteMode" type="PaletteMode" status="ByVal" opcode="FOR.63"/>
   <property id="Moveable" type="Boolean" status="ByVal" opcode="FOR.64"/>
   <property id="ClientHeight" type="TwipsY" status="ByVal" opcode="FOR.65"/>
   <property id="ClientLeft" type="TwipsX" status="ByVal" opcode="FOR.66"/>
   <property id="ClientTop" type="TwipsY" status="ByVal" opcode="FOR.67"/>
   <property id="ClientWidth" type="TwipsX" status="ByVal" opcode="FOR.68"/>
   <property id="LockControls" type="Boolean" status="ByVal" opcode="FOR.69"/>
   <property id="NegotiateMenus" type="Boolean" status="ByVal" opcode="FOR.70"/>
   <property id="CancelButton" type="CommandButton" status="ByVal" opcode="FOR.127"/>
   <property id="AcceptButton" type="CommandButton" status="ByVal" opcode="FOR.128"/>
   <method id="Refresh" type="Void" opcode="FOR.71"/>
   <method id="Move" type="Void" opcode="FOR.72">
     <argument id="Left" type="TwipsX" status="ByVal" />
     <argument id="Top" type="TwipsY" status="ByVal" optional="0" />
     <argument id="Width" type="TwipsX" status="ByVal" optional="0" />
     <argument id="Height" type="TwipsY" status="ByVal" optional="0" />
   </method>
   <method id="SetFocus" type="Void" opcode="FOR.73"/>
   <method id="ZOrder" type="Void" opcode="FOR.74">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Show" type="Void" opcode="FOR.75">
      <argument id="Modal" type="Integer" status="ByVal" optional="0"/>
      <argument id="OwnerForm" type="Form" status="ByVal" optional="%13%"/>
   </method>
   <method id="Hide" type="Void" opcode="FOR.76"/>
   <method id="PrintForm" type="Void" opcode="FOR.77"/>
   <method id="PopupMenu" type="Void" opcode="FOR.78">
      <argument id="Menu" type="Object" status="ByVal"/>
      <argument id="Flags" type="Variant" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal" optional="DEF.Overload"/>
      <argument id="Y" type="single" status="ByVal" optional="DEF.Overload"/>
      <argument id="DefaultMenu" type="Object" status="ByVal" optional="DEF.Overload"/>
      <argument id="EventSender" type="Object" status="ByVal" optional="DEF.NullObject"/>
   </method>
   <method id="Circle" type="Void" opcode="FOR.79">
      <argument id="Step" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="Radius" type="Single" status="ByVal"/>
      <argument id="Color" type="ole_color" status="ByVal" optional="2"/>
      <argument id="Start" type="Single" status="ByVal" optional="0"/>
      <argument id="End" type="Single" status="ByVal" optional="6.283185"/>
      <argument id="Aspect" type="Single" status="ByVal" optional="1"/>
   </method>
   <method id="Cls" type="Void" opcode="FOR.80"/>
   <method id="Line" type="Void" opcode="FOR.81" syntax="Line.0"/>
   <method id="PaintPicture" type="Void" opcode="FOR.82">
      <argument id="Picture" type="FrxPicture" status="ByVal"/>
      <argument id="X1" type="Single" status="ByVal"/>
      <argument id="Y1" type="Single" status="ByVal"/>
      <argument id="Width1" type="Variant" status="ByVal"/>
      <argument id="Height1" type="Variant" status="ByVal"/>
      <argument id="X2" type="Variant" status="ByVal"/>
      <argument id="Y2" type="Variant" status="ByVal"/>
      <argument id="Width2" type="Variant" status="ByVal"/>
      <argument id="Height2" type="Variant" status="ByVal"/>
      <argument id="Opcode" type="Variant" status="ByVal"/>
   </method>
   <method id="Point" type="Long" opcode="FOR.83">
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </method>
   <method id="PSet" type="Void" opcode="FOR.84" syntax="PSet.0"/>
   <method id="Scale" type="Void" opcode="FOR.85" syntax="Scale.124"/>
   <method id="ScaleX" type="Single" opcode="FOR.86">
      <argument id="Width" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="ScaleY" type="Single" opcode="FOR.87">
      <argument id="Height" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="TextWidth" type="Single" opcode="FOR.88">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="TextHeight" type="Single" opcode="FOR.89">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="ValidateControls" type="Void" opcode="FOR.90"/>
   <method id="WhatsThisMode" type="Void" opcode="FOR.91"/>
   <method id="OLEDrag" type="Void" opcode="FOR.92"/>
   <method id="Print" type="Void" opcode="FOR.125" syntax="Print.0"/>
   <method id="ShowDialog" type="Void" opcode="FOR.126">
      <argument id="Modal" type="Integer" status="ByVal" optional="0"/>
      <argument id="OwnerForm" type="Form" status="ByVal" optional="%13%"/>
   </method>
   <event id="Load" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.93"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
          netArgs="System.Windows.Forms.DragEventArgs" opcode="FOR.94">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="FOR.95">
      <argument id="Source" type="Control" status="ByVal" />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="LinkClose" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.96"/>
   <event id="LinkError" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.97">
      <argument id="LinkErr" type="Integer" status="ByVal"/>
   </event>
   <event id="LinkExecute" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.98">
      <argument id="CmdStr" type="String" status="ByVal"/>
      <argument id="Cancel" type="Integer" status="ByVal"/>
   </event>
   <event id="LinkOpen" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.99">
      <argument id="Cancel" type="Integer" status="ByVal"/>
   </event>
   <event id="Resize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.100"/>
   <event id="Unload" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.101">
      <argument id="Cancel" type="Integer" status="ByVal"
                            migPattern="Cancel = 1"/>
   </event>
   <event id="QueryUnload" netHandler="System.Windows.Forms.FormClosingEventHandler"
                           netArgs="System.Windows.Forms.FormClosingEventArgs"
                           opcode="FOR.102">
      <argument id="Cancel" type="Boolean" status="ByRef" migPattern="e.Cancel" />
      <argument id="UnloadMode" type="QueryUnloadConstants" status="ByVal" />
   </event>
   <pattern id="QueryUnload.UnloadMode">
      <all nArg="1" status="postfix" code="@gmRTL.GUI.ControlHelper@UnloadMode = e.GetReason(sender)" />
   </pattern>
   <event id="Activate" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.103"/>
   <event id="Deactivate" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.104"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.105"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.106"/>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.107"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="FOR.108">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="FOR.109">
      <argument id="KeyAscii" type="Integer" status="ByVal" />
   </event>
   <pattern id="KeyPress.KeyAscii">
      <wpf nArg="1" code="%1d = (int)e.Key" />
      <csh nArg="1" code="%1d = (int)e.KeyChar" />
      <vbn nArg="1" code="%1d = Asc(e.KeyChar)" />
   </pattern>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="FOR.110">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.111"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="FOR.112">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="FOR.113">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="FOR.114">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="Paint" netHandler="System.Windows.Forms.PaintEventHandler" netArgs="System.Windows.Forms.PaintEventArgs" opcode="FOR.115"/>
   <event id="Initialize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.116"/>
   <event id="Terminate" migStatus="CallPattern"
              netHandler="System.Windows.Forms.FormClosingEventHandler"
              netArgs="System.Windows.Forms.FormClosingEventArgs(new CloseReason(), false)"
              cshPattern="if(e.Cancel) return;"
              vbnPattern="If(e.Cancel) Then Exit Sub"
              opcode="FOR.117"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.118">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.119">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.120">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.121">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.122">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="FOR.123">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
</class>
<class id="Screen" parent="None" default="FontCount" opcode="SCR">
   <property id="Height" type="TwipsY" status="ByVal" opcode="SCR.0"/>
   <property id="FontCount" type="Integer" status="GetSet" opcode="SCR.1">
      <Get npram="1" migPattern="gmRTL.GUI.FontHelper.FontCount" />
   </property>
   <property id="Fonts" type="String[]" status="GetSet" opcode="SCR.2">
      <Get npram="1" migPattern="gmRTL.GUI.FontHelper.GetFonts" />
   </property>
   <property id="ActiveForm" type="Form" status="ByVal" opcode="SCR.3"/>
   <property id="ActiveControl" type="IdeControl" status="ByVal" opcode="SCR.4"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="SCR.5"/>
   <method   id="TwipsPerPixelX" type="Single"  opcode="SCR.6"/>
   <method   id="TwipsPerPixelY" type="Single"  opcode="SCR.7"/>
   <property id="MouseIcon" type="FrxPicture" status="ByVal" opcode="SCR.8"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="SCR.9"/>
   <property id="PrimaryScreen" type="Screen" status="ByVal" opcode="SCR.10" />
</class>
<class id="Clipboard" parent="None" opcode="CLP">
   <method id="Clear" type="Void" opcode="CLP.0"/>
   <method id="GetData" type="Variant" opcode="CLP.1">
      <argument id="Format" type="ClipboardConstants" status="ByVal" optional="Default"/>
   </method>
   <method id="SetData" type="Void" opcode="CLP.2">
      <argument id="Picture" type="FrxPicture" status="ByVal"/>
      <argument id="Format" type="Variant" status="ByVal"/>
   </method>
   <method id="GetText" type="String" opcode="CLP.3">
      <argument id="Format" type="ClipboardConstants" status="ByVal" optional="2"/>
   </method>
   <method id="SetText" type="Void" opcode="CLP.4">
      <argument id="Str" type="String" status="ByVal"/>
      <argument id="Format" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="GetFormat" type="Boolean" opcode="CLP.5">
      <argument id="Format" type="ClipboardConstants" status="ByVal"/>
   </method>
</class>
<class id="Menu" parent="None" default="Enabled" opcode="MEN">
   <property id="Name" type="String" status="ByVal" opcode="MEN.1"/>
   <property id="Index" type="Integer" status="GetSet" opcode="MEN.2"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()"/>
   </pattern>
   <property id="Visible" type="Boolean" status="ByVal" opcode="MEN.3"/>
   <property id="Caption" type="String" status="ByVal" opcode="MEN.4"/>
   <property id="Checked" type="Boolean" status="ByVal" opcode="MEN.5"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="MEN.6"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="MEN.7"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="MEN.8"/>
   <property id="WindowList" type="Boolean" status="ByVal" opcode="MEN.9"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="MEN.10">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="NegotiatePosition" type="Integer" status="ByVal" opcode="MEN.11"/>
   <property id="ShortCut" type="ShortCutKey" status="ByVal" opcode="MEN.13"/>
   <property id="Left" type="TwipsX" status="ByVal" opcode="MEN.14"/>
   <property id="Top" type="TwipsY" status="ByVal" opcode="MEN.15"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="MEN.16"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="MEN.17"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MEN.12"/>
</class>
<class id="MDIForm" parent="None" default="Name" opcode="MDI">
   <property id="Name" type="String" status="ByVal" opcode="MDI.1"/>
   <property id="Caption" type="String" status="ByVal" opcode="MDI.2"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="MDI.3"/>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="MDI.4"/>
   <property id="Left" type="TwipsX" status="ByVal" opcode="MDI.5"/>
   <property id="Top" type="TwipsY" status="ByVal" opcode="MDI.6"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="MDI.7"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="MDI.8"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="MDI.9"/>
   <property id="WindowState" type="FormWindowStateConstants" status="ByVal" opcode="MDI.10"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="MDI.11"/>
   <property id="ScrollBars" type="ScrollBarConstants" status="ByVal" opcode="MDI.12"/>
   <property id="ActiveForm" type="Form" status="ByVal" opcode="MDI.13"/>
   <property id="ScaleWidth" type="TwipsX" status="ByVal" opcode="MDI.14"/>
   <property id="ScaleHeight" type="TwipsY" status="ByVal" opcode="MDI.15"/>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="MDI.16"/>
   <property id="Icon" type="Icon" status="ByVal" opcode="MDI.17"/>
   <property id="LinkTopic" type="String" status="ByVal" opcode="MDI.18"/>
   <property id="LinkMode" type="Integer" status="ByVal" opcode="MDI.19"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="MDI.20"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="MDI.21"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="MDI.22">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="ActiveControl" type="IdeControl" status="ByVal" opcode="MDI.23"/>
   <property id="Count" type="Integer" status="ByVal" opcode="MDI.24"/>
   <property id="Controls" type="ContainedControls" status="ByVal" opcode="MDI.25"/>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="MDI.26">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="AutoShowChildren" type="Boolean" status="ByVal" opcode="MDI.27"/>
   <property id="Appearance" type="Integer" status="ByVal" opcode="MDI.28"/>
   <property id="WhatsThisHelp" type="Boolean" status="ByVal" opcode="MDI.29"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="MDI.30"/>
   <property id="StartUpPosition" type="StartupPositionConstants" status="ByVal" opcode="MDI.31"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="MDI.32"/>
   <property id="Moveable" type="Boolean" status="ByVal" opcode="MDI.33"/>
   <property id="ClientHeight" type="TwipsY" status="ByVal" opcode="MDI.34"/>
   <property id="ClientLeft" type="TwipsX" status="ByVal" opcode="MDI.35"/>
   <property id="ClientTop" type="TwipsY" status="ByVal" opcode="MDI.36"/>
   <property id="ClientWidth" type="TwipsX" status="ByVal" opcode="MDI.37"/>
   <property id="LockControls" type="Boolean" status="ByVal" opcode="MDI.38"/>
   <property id="NegotiateMenus" type="Boolean" status="ByVal" opcode="MDI.39"/>
   <method id="Move" type="Void" opcode="MDI.40">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="SetFocus" type="Void" opcode="MDI.41"/>
   <method id="ZOrder" type="Void" opcode="MDI.42">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Show" type="Void" opcode="MDI.43">
      <argument id="Modal" type="Integer" status="ByVal" optional="0"/>
      <argument id="OwnerForm" type="Form" status="ByVal" optional="%13%"/>
   </method>
   <method id="Hide" type="Void" opcode="MDI.44"/>
   <method id="PopupMenu" type="Void" opcode="MDI.45">
      <argument id="Menu" type="Object" status="ByVal"/>
      <argument id="Flags" type="Variant" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal" optional="Default"/>
      <argument id="Y" type="Single" status="ByVal" optional="Default"/>
      <argument id="DefaultMenu" type="Object" status="ByVal" optional="Default"/>
      <argument id="EventSender" type="Object" status="ByVal" optional="DEF.NullObject"/>
   </method>
   <method id="ValidateControls" type="Void" opcode="MDI.46"/>
   <method id="Arrange" type="Void" opcode="MDI.47">
      <argument id="Arrangement" type="LayoutArrangement" status="ByVal"/>
   </method>
   <method id="WhatsThisMode" type="Void" opcode="MDI.48"/>
   <method id="OLEDrag" type="Void" opcode="MDI.49"/>
   <event id="Load" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.50"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler"
              netArgs="System.Windows.Forms.DragEventArgs" opcode="MDI.51">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="MDI.52">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="LinkClose" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.53"/>
   <event id="LinkError" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.54">
      <argument id="LinkErr" type="Integer" status="ByVal"/>
   </event>
   <event id="LinkExecute" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.55">
      <argument id="CmdStr" type="String" status="ByVal"/>
      <argument id="Cancel" type="Integer" status="ByVal"/>
   </event>
   <event id="LinkOpen" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.56">
      <argument id="Cancel" type="Integer" status="ByVal"/>
   </event>
   <event id="Resize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.57"/>
   <event id="Unload" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.58">
      <argument id="Cancel" type="Integer" status="ByVal"
                            migPattern="Cancel = 1"/>
   </event>
   <event id="QueryUnload" netHandler="System.Windows.Forms.FormClosingEventHandler"
                           netArgs="System.Windows.Forms.FormClosingEventArgs"
                           opcode="MDI.59">
      <argument id="Cancel" type="Boolean" status="ByRef" migPattern="e.Cancel" />
      <argument id="UnloadMode" type="QueryUnloadConstants" status="ByVal" />
   </event>
   <pattern id="QueryUnload.UnloadMode">
      <all nArg="1" status="postfix" code="@gmRTL.GUI.ControlHelper@UnloadMode = e.GetReason(sender)" />
   </pattern>
   <event id="Activate" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.60"/>
   <event id="Deactivate" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.61"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.62"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.63"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="MDI.64">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="MDI.65">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="MDI.66">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="Initialize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.67"/>
   <event id="Terminate" migStatus="CallPattern"
              netHandler="System.Windows.Forms.FormClosingEventHandler"
              netArgs="System.Windows.Forms.FormClosingEventArgs(new CloseReason(), false)"
              cshPattern="if(e.Cancel) return;"
              vbnPattern="If(e.Cancel) Then Exit Sub"
              opcode="MDI.68"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.69">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.70">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.71">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.72">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.73">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="MDI.74">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
</class>
<class id="Shape" parent="None" default="Shape" opcode="SHA">
   <property id="Name" type="String" status="ByVal" opcode="SHA.1"/>
   <property id="Index" type="Integer" status="GetSet" opcode="SHA.2"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="SHA.3"/>
   <property id="BorderColor" type="OLE_COLOR" status="GetSet" opcode="SHA.4" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetBorderColor(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetBorderColor(%2d,%1d)\c" />
   </property>
   <property id="Left" type="TwipsX" status="ByVal" opcode="SHA.5"/>
   <property id="Top" type="TwipsY" status="ByVal" opcode="SHA.6"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="SHA.7"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="SHA.8"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="SHA.9"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="SHA.10"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="SHA.11"/>
   <property id="Shape" type="Integer" status="ByVal" opcode="SHA.12"/>
   <property id="DrawMode" type="Integer" status="ByVal" opcode="SHA.13"/>
   <property id="BorderStyle" type="SimpleBorderStyle" status="ByVal" opcode="SHA.14"/>
   <property id="BorderWidth" type="Integer" status="GetSet" opcode="SHA.15">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetBorderWidth(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetBorderWidth(%2d,%1d)\c" />
   </property>
   <property id="FillColor" type="OLE_COLOR" status="ByVal" opcode="SHA.16"/>
   <property id="BackStyle" type="BackStyleConstants" status="ByVal" opcode="SHA.17"/>
   <property id="FillStyle" type="Integer" status="ByVal" opcode="SHA.18" />
   <property id="Container" type="IdeControl" status="ByVal" opcode="SHA.19"/>
   <method id="AddItem" type="Void" opcode="SHA.20">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="SHA.21">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="SHA.22"/>
   <method id="Refresh" type="Void" opcode="SHA.23"/>
   <method id="ZOrder" type="Void" opcode="SHA.24">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="SHA.25">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="SHA.26">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="SHA.27"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="SHA.28"/>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="SHA.29"/>
   <property id="ForeColor" type="OLE_COLOR" status="GetSet" opcode="SHA.30"/>
   <pattern id="ForeColor.Get" >
      <wpf narg="1" code="%1d.GetForeColor()" />
      <all narg="1" code="%1d.ForeColor" />
   </pattern>
   <pattern id="ForeColor.Set" >
      <wpf narg="2" code="%2d.SetForeColor(%1d)\c" />
      <all narg="2" code="%2d.ForeColor = %1d\c" />
   </pattern>
   <property id="ToolTipText" type="String" status="GetSet" opcode="SHA.31" />
   <pattern id="ToolTipText.Get" >
      <wpf narg="1" code="%1d.ToolTip" />
      <all narg="1" code="ToolTip1.GetToolTip(%1d)" />
   </pattern>
   <pattern id="ToolTipText.Set" >
      <wpf narg="2" code="%2d.ToolTip = %1d\c" />
      <all narg="2" code="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </pattern>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="SHA.32"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="SHA.33"/>
</class>
<class id="Line" parent="None" default="Visible" opcode="LIN">
   <property id="Name" type="String" status="ByVal" opcode="LIN.1"/>
   <property id="Index" type="Integer" status="GetSet" opcode="LIN.2"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="BorderColor" type="OLE_COLOR" status="ByVal" opcode="LIN.3"/>
   <property id="X1" type="TwipsX" status="ByVal" opcode="LIN.4"/>
   <property id="Y1" type="TwipsY" status="ByVal" opcode="LIN.5"/>
   <property id="X2" type="TwipsX" status="ByVal" opcode="LIN.6"/>
   <property id="Y2" type="TwipsY" status="ByVal" opcode="LIN.7"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="LIN.8"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="LIN.9"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="LIN.10"/>
   <property id="DrawMode" type="Integer" status="ByVal" opcode="LIN.11"/>
   <property id="BorderStyle" type="DrawStyleConstants" status="GetSet" opcode="LIN.12" />
      <pattern id="BorderStyle.Get" >
         <all narg="1" code="gmRTL.GUI.ControlHelper.GetDrawStyle(%1d)" />
      </pattern>
      <pattern id="BorderStyle.Set" >
         <all narg="2" code="gmRTL.GUI.ControlHelper.SetDrawStyle(%2d,%1d)\c" />
      </pattern>
   <property id="BorderWidth" type="Integer" status="ByVal" opcode="LIN.13"/>
   <property id="Container" type="IdeControl" status="ByVal" opcode="LIN.14"/>
   <method id="AddItem" type="Void" opcode="LIN.15">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="LIN.16">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="LIN.17"/>
   <method id="Refresh" type="Void" opcode="LIN.18"/>
   <method id="ZOrder" type="Void" opcode="LIN.19">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Drag" type="Void" opcode="LIN.20">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
</class>
<class id="Image" parent="None" default="Picture" opcode="IMA">
   <property id="Name" type="String" status="ByVal" opcode="IMA.1"/>
   <property id="Index" type="Integer" status="GetSet" opcode="IMA.2"/>
   <pattern id="Index.Get" >
      <all narg="1" status="Postfix" code="@gmRTL.GUI.ControlHelper@%1d.GetControlIndex()" />
   </pattern>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="IMA.3"/>
   <property id="Left" type="TwipsX" status="ByVal" opcode="IMA.4"/>
   <property id="Top" type="TwipsY" status="ByVal" opcode="IMA.5"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="IMA.6"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="IMA.7"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="IMA.8"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="IMA.9"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="IMA.10"/>
   <property id="Stretch" type="PictureBoxSizeMode" status="ByVal" opcode="IMA.11"/>
   <property id="Parent" type="IdeControl" status="ByVal" opcode="IMA.12"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="IMA.13"/>
   <property id="DragIcon" type="FrxPicture" status="ByVal" opcode="IMA.14"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="IMA.15"/>
   <property id="BorderStyle" type="SimpleBorderStyle" status="ByVal" opcode="IMA.16"/>
   <property id="DataField" type="String" status="GetSet" opcode="IMA.17" />
   <pattern id="DataField.Get" >
      <all narg="1" code="@gmRTL.GUI.DataSourcer@dataSourcer1.GetDataField(%1d)" />
   </pattern>
   <pattern id="DataField.Set" >
      <all narg="2" code="@gmRTL.GUI.DataSourcer@dataSourcer1.SetDataField(%2d,%1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="IMA.18" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </property>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="IMA.19">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <Property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="IMA.20"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="ByVal" opcode="IMA.21"/>
   <property id="Container" type="IdeControl" status="ByVal" opcode="IMA.22"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="IMA.23">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <property id="OLEDragMode" type="Integer" status="ByVal" opcode="IMA.24"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="IMA.25"/>
   <property id="DataMember" type="String" status="ByVal" opcode="IMA.26"/>
   <property id="DataFormat" type="Object" status="ByVal" opcode="IMA.27"/>
   <property id="DataSource" type="Object" status="ByVal" opcode="IMA.28"/>
   <method id="AddItem" type="Void" opcode="IMA.29">
      <argument id="Item" type="String" status="ByVal"/>
      <argument id="Index" type="Integer" status="ByVal" optional="%7%"/>
   </method>
   <method id="RemoveItem" type="Void" opcode="IMA.30">
      <argument id="Arg0" type="Integer" status="ByVal"/>
   </method>
   <method id="Clear" type="Void" opcode="IMA.31"/>
   <method id="OLEDrag" type="Void" opcode="IMA.32"/>
   <method id="Refresh" type="Void" opcode="IMA.33"/>
   <method id="ZOrder" type="Void" opcode="IMA.34">
      <argument id="Position" type="Variant" status="ByVal" optional="%0%"/>
   </method>
   <method id="Move" type="Void" opcode="IMA.35">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <method id="Drag" type="Void" opcode="IMA.36">
      <argument id="Action" type="Variant" status="ByVal"/>
   </method>
   <method id="ShowWhatsThis" type="Void" opcode="IMA.37"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IMA.38"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IMA.39"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="IMA.40">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal" />
      <argument id="Y" type="Integer" status="ByVal" />
   </event>
   <pattern id="DragDrop.Source">
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="IMA.41">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="IMA.42">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="IMA.43">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="IMA.44">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IMA.45">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IMA.46">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IMA.47">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IMA.48">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IMA.49">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="IMA.50">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <Method id="Type" type="PictureTypeConstants" opcode="IMA.Type"/>
</class>
<class id="UserControl" parent="None" default="Name" opcode="USC">
   <property id="Name" type="String" status="ByVal" opcode="USC.1"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="USC.2"/>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="USC.3"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="USC.4"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="USC.5"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="USC.6"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="USC.7"/>
   <property id="MousePointer" type="MousePointerconstants" status="ByVal" opcode="USC.8"/>
   <property id="FontName" type="String" status="GetSet" opcode="USC.9" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="USC.10" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="USC.11"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="USC.12" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="USC.13" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="USC.14" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="hDC" type="OLE_HANDLE" status="ByVal" opcode="USC.15"/>
   <property id="CurrentX" type="TwipsX" status="GetSet" opcode="USC.16" />
   <pattern id="CurrentX.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetCurrentX(%1d)" />
   </pattern>
   <pattern id="CurrentX.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetCurrentX(%2d,%1d)\c" />
   </pattern>
   <property id="CurrentY" type="TwipsY" status="GetSet" opcode="USC.17" />
   <pattern id="CurrentY.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetCurrentY(%1d)" />
   </pattern>
   <pattern id="CurrentY.Set" >
       <all narg="2" code="gmRTL.GUI.ControlHelper.SetCurrentY(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleLeft" type="TwipsX" status="GetSet" opcode="USC.18" />
   <pattern id="ScaleLeft.Get" >
      <wpf narg="1" code="%1d.ScaleLeft" />
      <all narg="1" code="%1d.ClientRectangle.Left" />
   </pattern>
   <pattern id="ScaleLeft.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleLeft(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleTop" type="TwipsY" status="GetSet" opcode="USC.19" />
   <pattern id="ScaleTop.Get" >
      <wpf narg="1" code="%1d.ScaleTop" />
      <all narg="1" code="%1d.ClientRectangle.Top" />
   </pattern>
   <pattern id="ScaleTop.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleTop(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleWidth" type="TwipsX" status="ByVal" opcode="USC.20"/>
   <property id="ScaleHeight" type="TwipsY" status="ByVal" opcode="USC.21" />
   <property id="ScaleMode" type="ScaleModeConstants" status="GetSet" opcode="USC.22">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetScaleMode(%1d)" />
     <Set npram="2" migPattern="on" />
   </property>
   <property id="FontTransparent" type="Boolean" status="GetSet" opcode="USC.23" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFontTransparent(%1d)" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetTransparent(%2d.Font, %1d)\c" />
   </property>
   <property id="DrawStyle" type="DrawStyleConstants" status="GetSet" opcode="USC.24" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDrawStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDrawStyle(%2d,%1d)\c" />
   </property>
   <property id="DrawWidth" type="Integer" status="GetSet" opcode="USC.25"/>
   <pattern id="DrawWidth.Get" >
      <wpf narg="1" code="%1d.DrawWidth" />
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetDrawWidth(%1d)" />
   </pattern>
   <pattern id="DrawWidth.Set" >
      <wpf narg="2" code="%2d.DrawWidth = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetDrawWidth(%2d,%1d)\c" />
   </pattern>
   <property id="FillStyle" type="Integer" status="GetSet" opcode="USC.26" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFillStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetFillStyle(%2d,%1d)\c" />
   </property>
   <property id="FillColor" type="OLE_COLOR" status="ByVal" opcode="USC.27" migStatus="NotImplemented"/>
   <property id="DrawMode" type="Integer" status="ByVal" opcode="USC.28"/>
   <property id="AutoRedraw" type="Boolean" status="GetSet" opcode="USC.29"/>
   <pattern id="AutoRedraw.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetAutoRedraw(%1d)" />
   </pattern>
   <pattern id="AutoRedraw.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetAutoRedraw(%2d,%1d)\c" />
   </pattern>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="USC.30"/>
   <property id="Image" type="FrxPicture" status="ByVal" opcode="USC.31" migStatus="NotImplemented" />
   <property id="Parent" type="IdeControl" status="ByVal" opcode="USC.32"/>
   <property id="MaskColor" type="OLE_COLOR" status="ByVal" opcode="USC.33" migStatus="NotImplemented" />
   <property id="MaskPicture" type="FrxPicture" status="ByVal" opcode="USC.34" migStatus="NotImplemented" />
   <property id="Tag" type="Variant" status="ByVal" opcode="USC.35"/>
   <property id="KeyPreview" type="Boolean" status="ByVal" opcode="USC.36"/>
   <property id="ClipControls" type="Boolean" status="ByVal" opcode="USC.37" migStatus="NotImplemented" />
   <property id="ActiveControl" type="IdeControl" status="ByVal" opcode="USC.38"/>
   <property id="Count" type="Integer" status="ByVal" opcode="USC.39"/>
   <property id="Controls" type="ContainedControls" status="ByVal" opcode="USC.40"/>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="USC.41">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="DataMembers" type="Object" status="ByVal" opcode="USC.42"/>
   <property id="ClipBehavior" type="Integer" status="ByVal" opcode="USC.43"/>
   <property id="Font" type="Font" status="ByVal" opcode="USC.44"/>
   <pattern id="Font.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="Font.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = %1d\c" />
   </pattern>
   <property id="Appearance" type="Integer" status="GetSet" opcode="USC.45">
      <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetAppearance(%1d)" />
      <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetAppearance(%2d,%1d)\c" />
   </property>
   <property id="ContainerHwnd" type="Long" status="GetSet" opcode="USC.46" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetContainerHwnd(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetContainerHwnd(%2d,%1d)\c" />
   </property>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="USC.47"/>
   <property id="HasDC" type="Boolean" status="ByVal" opcode="USC.48"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="USC.49" migStatus="NotImplemented" />
   <property id="Palette" type="FrxPicture" status="ByVal" opcode="USC.50"/>
   <property id="PaletteMode" type="PaletteMode" status="ByVal" opcode="USC.51"/>
   <property id="HitBehavior" type="Integer" status="ByVal" opcode="USC.52"/>
   <property id="Ambient" type="Form" status="ByVal" opcode="USC.53"/>
   <property id="PropertyPages" type="String" status="ByVal" opcode="USC.54"/>
   <property id="ContainedControls" type="ContainedControls" status="ByVal" opcode="USC.56"/>
   <property id="ParentControls" type="Collection" status="GetSet" opcode="USC.57">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetParentControls(%1d)" />
   </property>
   <property id="BackStyle" type="BackStyleConstants" status="GetSet" opcode="USC.58">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetBackStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetBackStyle(%2d,%1d)\c" />
   </property>
   <property id="EventsFrozen" type="Boolean" status="ByVal" opcode="USC.59"/>
   <property id="BorderStyle" type="SimpleBorderStyle" status="ByVal" opcode="USC.60"/>
   <property id="AccessKeys" type="String" status="ByVal" opcode="USC.61"/>
   <property id="HyperLink" type="Variant" status="GetSet" opcode="USC.62" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHyperLink(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHyperLink(%2d,%1d)\c" />
   </property>
   <property id="ClientHeight" type="TwipsY" status="ByVal" opcode="USC.121"/>
   <property id="ClientLeft" type="TwipsX" status="ByVal" opcode="USC.122"/>
   <property id="ClientTop" type="TwipsY" status="ByVal" opcode="USC.123"/>
   <property id="ClientWidth" type="TwipsX" status="ByVal" opcode="USC.124"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="USC.125"/>
   <property id="Left" type="TwipsX" status="ByVal" opcode="USC.126"/>
   <property id="Top" type="TwipsY" status="ByVal" opcode="USC.127"/>
   <method id="Refresh" type="Void" opcode="USC.63"/>
   <method id="SetFocus" type="Void" opcode="USC.64"/>
   <method id="DataMemberChanged" type="Void" opcode="USC.65">
      <argument id="DataMember" type="String" status="ByVal"/>
   </method>
   <method id="PopupMenu" type="Void" opcode="USC.66">
      <argument id="Menu" type="Object" status="ByVal"/>
      <argument id="Flags" type="Variant" status="ByVal" optional="Default" />
      <argument id="X" type="Single" status="ByVal" optional="DEF.Overload"/>
      <argument id="Y" type="Single" status="ByVal" optional="DEF.Overload"/>
      <argument id="DefaultMenu" type="Object" status="ByVal" optional="DEF.Overload"/>
      <argument id="EventSender" type="Object" status="ByVal" optional="DEF.NullObject"/>
   </method>
   <method id="Circle" type="Void" opcode="USC.67">
      <argument id="Step" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="Radius" type="Single" status="ByVal"/>
      <argument id="Color" type="ole_color" status="ByVal" optional="2"/>
      <argument id="Start" type="Single" status="ByVal" optional="0"/>
      <argument id="End" type="Single" status="ByVal" optional="6.283185"/>
      <argument id="Aspect" type="Single" status="ByVal" optional="1"/>
   </method>
   <method id="Cls" type="Void" opcode="USC.68"/>
   <method id="Line" type="Void" opcode="USC.69" syntax="Line.0"/>
   <method id="PaintPicture" type="Void" opcode="USC.70">
      <argument id="Picture" type="FrxPicture" status="ByVal"/>
      <argument id="X1" type="Single" status="ByVal"/>
      <argument id="Y1" type="Single" status="ByVal"/>
      <argument id="Width1" type="Variant" status="ByVal"/>
      <argument id="Height1" type="Variant" status="ByVal"/>
      <argument id="X2" type="Variant" status="ByVal"/>
      <argument id="Y2" type="Variant" status="ByVal"/>
      <argument id="Width2" type="Variant" status="ByVal"/>
      <argument id="Height2" type="Variant" status="ByVal"/>
      <argument id="Opcode" type="Variant" status="ByVal"/>
   </method>
   <method id="Point" type="Long" opcode="USC.71">
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </method>
   <method id="Print" type="Void" opcode="FOR.125" syntax="Print.0"/>
   <method id="PSet" type="Void" opcode="USC.72" syntax="PSet.0"/>
   <method id="Scale" type="Void" opcode="USC.73" syntax="Scale.120"/>
   <method id="ScaleX" type="Single" opcode="USC.74">
      <argument id="Width" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="ScaleY" type="Single" opcode="USC.75">
      <argument id="Height" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal" Optional="0"/>
   </method>
   <method id="TextWidth" type="Single" opcode="USC.76">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="TextHeight" type="Single" opcode="USC.77">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="ValidateControls" type="Void" opcode="USC.78"/>
   <method id="OLEDrag" type="Void" opcode="USC.79"/>
   <method id="PropertyChanged" type="Void" opcode="USC.80" >
      <argument id="PropertyName" type="Variant" status="ByVal"/>
   </method>
   <method id="CanPropertyChange" type="Boolean" opcode="USC.81">
      <argument id="PropertyName" type="String" status="ByVal"/>
   </method>
   <method id="Size" type="Void" opcode="USC.82">
      <argument id="X" type="TwipsX" status="ByVal"/>
      <argument id="Y" type="TwipsY" status="ByVal"/>
   </method>
   <method id="AsyncRead" type="Void" opcode="USC.83">
      <argument id="Target" type="String" status="ByVal"/>
      <argument id="AsyncType" type="Long" status="ByVal"/>
      <argument id="PropertyName" type="Variant" status="ByVal"/>
      <argument id="AsyncReadOptions" type="Variant" status="ByVal"/>
   </method>
   <method id="CancelAsyncRead" type="Void" opcode="USC.84">
      <argument id="Property" type="Variant" status="ByVal"/>
   </method>
   <event id="Initialize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.85"/>
   <event id="DragDrop" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="USC.86">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <pattern id="DragDrop.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)sender" />
      <vbn nArg="1" code="%1d = CType(sender,System.Windows.Forms.Control)" />
   </pattern>
   <pattern id="DragDrop.X">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).X" />
      <all nArg="1"  code="%1d = e.X" />
   </pattern>
   <pattern id="DragDrop.Y">
      <wpf nArg="1"  code="%1d = e.GetScalePosition(sender).Y" />
      <all nArg="1"  code="%1d = e.Y" />
   </pattern>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="USC.87">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="Resize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.88"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.89"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.90"/>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.91"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="USC.92">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="USC.93">
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Asc(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="USC.94">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.95"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="USC.96">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="USC.97">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="USC.98">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="Paint" netHandler="System.Windows.Forms.PaintEventHandler" netArgs="System.Windows.Forms.PaintEventArgs" opcode="USC.99"/>
   <event id="Terminate" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.100"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.101">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.102">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.103">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.104">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.105">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.106">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="WriteProperties" netHandler="gmRTL.GUI.PropertyBag.EventHandler" netArgs="gmRTL.GUI.PropertyBag" opcode="USC.107">
      <argument id="PropBag" type="Object" status="ByVal" cshPattern="%1d = e" vbnPattern="%1d = e" />
   </event>
   <event id="ReadProperties" netHandler="gmRTL.GUI.PropertyBag.EventHandler" netArgs="gmRTL.GUI.PropertyBag" opcode="USC.108">
      <argument id="PropBag" type="Object" status="ByVal" cshPattern="%1d = e" vbnPattern="%1d = e" />
   </event>
   <event id="InitProperties" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.109" />
   <event id="AsyncReadComplete" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.110">
      <argument id="AsyncProp" type="Object" status="ByVal"/>
   </event>
   <event id="EnterFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.111"/>
   <event id="ExitFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.112"/>
   <event id="Show" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.113"/>
   <event id="Hide" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.114"/>
   <event id="AmbientChanged" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.115">
      <argument id="PropertyName" type="String" status="ByVal"/>
   </event>
   <event id="AccessKeyPress" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.116">
      <argument id="KeyAscii" type="Integer" status="ByVal"/>
   </event>
   <event id="AsyncReadProgress" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.117">
      <argument id="AsyncProp" type="Object" status="ByVal"/>
   </event>
   <event id="GetDataMember" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.118">
      <argument id="DataMember" type="String" status="ByVal"/>
      <argument id="Data" type="Object" status="ByVal"/>
   </event>
   <event id="HitTest" netHandler="System.EventHandler" netArgs="EventArgs" opcode="USC.119">
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="HitResult" type="Integer" status="ByVal"/>
   </event>
   <property id="Extender" type="ideControl" status="GetSet" opcode="USC.55">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetExtender(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetExtender(%2d,%1d)\c" />
   </property>
</class>
<class id="PropertyPage" parent="None" default="Name" opcode="PPA">
   <property id="Name" type="String" status="ByVal" opcode="PPA.1"/>
   <property id="Caption" type="String" status="ByVal" opcode="PPA.2"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="PPA.3"/>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="PPA.4"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="PPA.5"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="PPA.6"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="PPA.7"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="PPA.8"/>
   <property id="FontName" type="String" status="GetSet" opcode="PPA.9" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="PPA.10" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="PPA.11"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="PPA.12" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="PPA.13" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="PPA.14" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="hDC" type="OLE_HANDLE" status="ByVal" opcode="PPA.15"/>
   <property id="CurrentX" type="TwipsX" status="ByVal" opcode="PPA.16"/>
   <property id="CurrentY" type="TwipsY" status="ByVal" opcode="PPA.17"/>
   <property id="ScaleLeft" type="TwipsX" status="GetSet" opcode="PPA.18" />
   <pattern id="ScaleLeft.Get" >
      <wpf narg="1" code="%1d.ScaleLeft" />
      <all narg="1" code="%1d.ClientRectangle.Left" />
   </pattern>
   <pattern id="ScaleLeft.Set" >
      <wpf narg="2" code="%2d.ScaleLeft = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleLeft(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleTop" type="TwipsY" status="GetSet" opcode="PPA.19" />
   <pattern id="ScaleTop.Get" >
      <wpf narg="1" code="%1d.ScaleTop" />
      <all narg="1" code="%1d.ClientRectangle.Top" />
   </pattern>
   <pattern id="ScaleTop.Set" >
      <wpf narg="2" code="%2d.ScaleTop = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleTop(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleWidth" type="TwipsX" status="ByVal" opcode="PPA.20"/>
   <property id="ScaleHeight" type="TwipsY" status="ByVal" opcode="PPA.21"/>
   <property id="ScaleMode" type="ScaleModeConstants" status="ByVal" opcode="PPA.22"/>
   <property id="FontTransparent" type="Boolean" status="GetSet" opcode="PPA.23" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFontTransparent(%1d)" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetTransparent(%2d.Font, %1d)\c" />
   </property>
   <property id="DrawStyle" type="Integer" status="ByVal" opcode="PPA.24"/>
   <property id="DrawWidth" type="Integer" status="ByVal" opcode="PPA.25"/>
   <property id="FillStyle" type="Integer" status="GetSet" opcode="PPA.26" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFillStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetFillStyle(%2d,%1d)\c" />
   </property>
   <property id="FillColor" type="OLE_COLOR" status="ByVal" opcode="PPA.27"/>
   <property id="DrawMode" type="Integer" status="ByVal" opcode="PPA.28"/>
   <property id="AutoRedraw" type="Boolean" status="GetSet" opcode="PPA.29"/>
   <pattern id="AutoRedraw.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetAutoRedraw(%1d)" />
   </pattern>
   <pattern id="AutoRedraw.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetAutoRedraw(%2d,%1d)\c" />
   </pattern>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="PPA.30"/>
   <property id="Image" type="FrxPicture" status="ByVal" opcode="PPA.31"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="PPA.32"/>
   <property id="KeyPreview" type="Boolean" status="ByVal" opcode="PPA.33"/>
   <property id="ClipControls" type="Boolean" status="ByVal" opcode="PPA.34"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="PPA.35">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="ActiveControl" type="IdeControl" status="ByVal" opcode="PPA.36"/>
   <property id="Count" type="Integer" status="ByVal" opcode="PPA.37"/>
   <property id="Controls" type="ContainedControls" status="ByVal" opcode="PPA.38"/>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="PPA.39">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="PPA.40"/>
   <property id="Appearance" type="Integer" status="ByVal" opcode="PPA.41"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="PPA.42"/>
   <property id="HasDC" type="Boolean" status="ByVal" opcode="PPA.43"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="PPA.44"/>
   <property id="Palette" type="FrxPicture" status="ByVal" opcode="PPA.45"/>
   <property id="PaletteMode" type="PaletteMode" status="ByVal" opcode="PPA.46"/>
   <property id="SelectedControls" type="Object" status="ByVal" opcode="PPA.47"/>
   <property id="Changed" type="Boolean" status="ByVal" opcode="PPA.48"/>
   <method id="Refresh" type="Void" opcode="PPA.49"/>
   <method id="SetFocus" type="Void" opcode="PPA.50"/>
   <method id="PopupMenu" type="Void" opcode="PPA.51">
      <argument id="Menu" type="Object" status="ByVal"/>
      <argument id="Flags" type="Variant" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="DefaultMenu" type="Variant" status="ByVal"/>
   </method>
   <method id="Circle" type="Void" opcode="PPA.52">
      <argument id="Step" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="Radius" type="Single" status="ByVal"/>
      <argument id="Color" type="ole_color" status="ByVal" optional="2"/>
      <argument id="Start" type="Single" status="ByVal" optional="0"/>
      <argument id="End" type="Single" status="ByVal" optional="6.283185"/>
      <argument id="Aspect" type="Single" status="ByVal" optional="1"/>
   </method>
   <method id="Cls" type="Void" opcode="PPA.53"/>
   <method id="Line" type="Void" opcode="PPA.54" syntax="Line.0"/>
   <method id="PaintPicture" type="Void" opcode="PPA.55">
      <argument id="Picture" type="FrxPicture" status="ByVal"/>
      <argument id="X1" type="Single" status="ByVal"/>
      <argument id="Y1" type="Single" status="ByVal"/>
      <argument id="Width1" type="Variant" status="ByVal"/>
      <argument id="Height1" type="Variant" status="ByVal"/>
      <argument id="X2" type="Variant" status="ByVal"/>
      <argument id="Y2" type="Variant" status="ByVal"/>
      <argument id="Width2" type="Variant" status="ByVal"/>
      <argument id="Height2" type="Variant" status="ByVal"/>
      <argument id="Opcode" type="Variant" status="ByVal"/>
   </method>
   <method id="Point" type="Long" opcode="PPA.56">
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </method>
   <method id="PSet" type="Void" opcode="PPA.57" syntax="PSet.0"/>
   <method id="Scale" type="Void" opcode="PPA.58" syntax="Scale.89"/>
   <method id="ScaleX" type="Single" opcode="PPA.59">
      <argument id="Width" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="ScaleY" type="Single" opcode="PPA.60">
      <argument id="Height" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="TextWidth" type="Single" opcode="PPA.61">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="TextHeight" type="Single" opcode="PPA.62">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="ValidateControls" type="Void" opcode="PPA.63"/>
   <method id="OLEDrag" type="Void" opcode="PPA.64"/>
   <event id="SelectionChanged" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.65"/>
   <event id="DragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.66">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="PPA.67">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.68"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.69"/>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.70"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="PPA.71">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="PPA.72">
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Asc(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="PPA.73">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.74"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="PPA.75">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="PPA.76">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="PPA.77">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="Paint" netHandler="System.Windows.Forms.PaintEventHandler" netArgs="System.Windows.Forms.PaintEventArgs" opcode="PPA.78"/>
   <event id="Initialize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.79"/>
   <event id="Terminate" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.80"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.81">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.82">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.83">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.84">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.85">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.86">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="ApplyChanges" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.87"/>
   <event id="EditProperty" netHandler="System.EventHandler" netArgs="EventArgs" opcode="PPA.88">
      <argument id="PropertyName" type="String" status="ByVal"/>
   </event>
</class>
<class id="UserDocument" parent="None" default="Name" opcode="UDC">
   <property id="Name" type="String" status="ByVal" opcode="UDC.1"/>
   <property id="hWnd" type="OLE_HANDLE" status="ByVal" opcode="UDC.2"/>
   <property id="BackColor" type="OLE_COLOR" status="ByVal" opcode="UDC.3"/>
   <property id="ForeColor" type="OLE_COLOR" status="ByVal" opcode="UDC.4"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="UDC.5"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="UDC.6"/>
   <property id="MousePointer" type="MousePointerConstants" status="ByVal" opcode="UDC.7"/>
   <property id="FontName" type="String" status="GetSet" opcode="UDC.8" />
   <pattern id="FontName.Get" >
      <wpf narg="1" code="%1d.FontFamily.Source" />
      <all narg="1" code="%1d.Font.Name" />
   </pattern>
   <pattern id="FontName.Set" >
      <wpf narg="2" code="%2d.FontFamily = new System.Windows.Media.FontFamily(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetName(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontSize" type="Single" status="GetSet" opcode="UDC.9" />
   <pattern id="FontSize.Get" >
      <wpf narg="1" code="%1d.FontSize" />
      <all narg="1" code="%1d.Font.Size" />
   </pattern>
   <pattern id="FontSize.Set" >
      <wpf narg="2" code="%2d.FontSize = (%1d * 1.333)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetSize(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontBold" type="Boolean" status="GetSet" opcode="UDC.10"/>
   <pattern id="FontBold.Get" >
      <wpf narg="1" code="%1d.GetFontBold()" />
      <all narg="1" code="%1d.Font.Bold" />
   </pattern>
   <pattern id="FontBold.Set" >
      <wpf narg="2" code="%2d.SetFontBold(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetBold(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontItalic" type="Boolean" status="GetSet" opcode="UDC.11" />
   <pattern id="FontItalic.Get" >
      <wpf narg="1" code="%1d.GetFontItalic()" />
      <all narg="1" code="%1d.Font.Italic" />
   </pattern>
   <pattern id="FontItalic.Set" >
      <wpf narg="2" code="%2d.SetFontItalic(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetItalic(%2d.Font, %1d)\c" />
   </pattern>
   <property id="FontStrikethru" type="Boolean" status="GetSet" opcode="UDC.12" />
   <pattern id="FontStrikethru.Get" >
      <wpf narg="1" code="%1d.GetFontStrikeout()" />
      <all narg="1" code="%1d.Font.Strikeout" />
   </pattern>
   <pattern id="FontStrikethru.Set" >
      <wpf narg="2" code="%2d.SetFontStrikeout(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetStrikethru(%2d.Font,%1d)\c" />
   </pattern>
   <property id="FontUnderline" type="Boolean" status="GetSet" opcode="UDC.13" />
   <pattern id="FontUnderline.Get" >
      <wpf narg="1" code="%1d.GetFontUnderline()" />
      <all narg="1" code="%1d.Font.Underline" />
   </pattern>
   <pattern id="FontUnderline.Set" >
      <wpf narg="2" code="%2d.SetFontUnderline(%1d)\c" />
      <all narg="2" code="%2d.Font = gmRTL.GUI.FontHelper.SetUnderline(%2d.Font, %1d)\c" />
   </pattern>
   <property id="hDC" type="OLE_HANDLE" status="ByVal" opcode="UDC.14"/>
   <property id="CurrentX" type="TwipsX" status="ByVal" opcode="UDC.15"/>
   <property id="CurrentY" type="TwipsY" status="ByVal" opcode="UDC.16"/>
   <property id="ScaleLeft" type="TwipsX" status="GetSet" opcode="UDC.17" />
   <pattern id="ScaleLeft.Get" >
      <wpf narg="1" code="%1d.ScaleLeft" />
      <all narg="1" code="%1d.ClientRectangle.Left" />
   </pattern>
   <pattern id="ScaleLeft.Set" >
      <wpf narg="2" code="%2d.ScaleLeft = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleLeft(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleTop" type="TwipsY" status="GetSet" opcode="UDC.18" />
   <pattern id="ScaleTop.Get" >
      <wpf narg="1" code="%1d.ScaleTop" />
      <all narg="1" code="%1d.ClientRectangle.Top" />
   </pattern>
   <pattern id="ScaleTop.Set" >
      <wpf narg="2" code="%2d.ScaleTop = %1d\c" />
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetScaleTop(%2d,%1d)\c" />
   </pattern>
   <property id="ScaleWidth" type="TwipsX" status="ByVal" opcode="UDC.19"/>
   <property id="ScaleHeight" type="TwipsY" status="ByVal" opcode="UDC.20"/>
   <property id="ScaleMode" type="ScaleModeConstants" status="ByVal" opcode="UDC.21"/>
   <property id="FontTransparent" type="Boolean" status="GetSet" opcode="UDC.22" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFontTransparent(%1d)" />
     <Set npram="2" migPattern="%2d.Font = gmRTL.GUI.FontHelper.SetTransparent(%2d.Font, %1d)\c" />
   </property>
   <property id="DrawStyle" type="Integer" status="ByVal" opcode="UDC.23"/>
   <property id="DrawWidth" type="Integer" status="ByVal" opcode="UDC.24"/>
   <property id="FillStyle" type="Integer" status="GetSet" opcode="UDC.25" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFillStyle(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetFillStyle(%2d,%1d)\c" />
   </property>
   <property id="FillColor" type="OLE_COLOR" status="ByVal" opcode="UDC.26"/>
   <property id="DrawMode" type="Integer" status="ByVal" opcode="UDC.27"/>
   <property id="AutoRedraw" type="Boolean" status="GetSet" opcode="UDC.28"/>
   <pattern id="AutoRedraw.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetAutoRedraw(%1d)" />
   </pattern>
   <pattern id="AutoRedraw.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetAutoRedraw(%2d,%1d)\c" />
   </pattern>
   <property id="Picture" type="FrxPicture" status="ByVal" opcode="UDC.29"/>
   <property id="Image" type="FrxPicture" status="ByVal" opcode="UDC.30"/>
   <property id="Tag" type="Variant" status="ByVal" opcode="UDC.31"/>
   <property id="KeyPreview" type="Boolean" status="ByVal" opcode="UDC.32"/>
   <property id="ClipControls" type="Boolean" status="ByVal" opcode="UDC.33"/>
   <property id="ActiveControl" type="IdeControl" status="ByVal" opcode="UDC.34"/>
   <property id="Count" type="Integer" status="ByVal" opcode="UDC.35"/>
   <property id="Controls" type="ContainedControls" status="ByVal" opcode="UDC.36"/>
   <property id="MouseIcon" type="FrxPicture" status="GetSet" opcode="UDC.37">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetMouseIcon(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetMouseIcon(%2d,%1d)\c" />
   </property>
   <property id="Font" type="Font" status="ByVal" opcode="UDC.38"/>
   <property id="Appearance" type="Integer" status="ByVal" opcode="UDC.39"/>
   <property id="RightToLeft" type="RLDirection" status="ByVal" opcode="UDC.40"/>
   <property id="HasDC" type="Boolean" status="ByVal" opcode="UDC.41"/>
   <property id="OLEDropMode" type="Integer" status="ByVal" opcode="UDC.42"/>
   <property id="Palette" type="FrxPicture" status="ByVal" opcode="UDC.43"/>
   <property id="PaletteMode" type="PaletteMode" status="ByVal" opcode="UDC.44"/>
   <property id="Parent" type="Object" status="ByVal" opcode="UDC.45"/>
   <property id="ScrollBars" type="ScrollBarConstants" status="ByVal" opcode="UDC.46"/>
   <property id="ContinuousScroll" type="Boolean" status="ByVal" opcode="UDC.47"/>
   <property id="HScrollSmallChange" type="Single" status="ByVal" opcode="UDC.48"/>
   <property id="VScrollSmallChange" type="Single" status="ByVal" opcode="UDC.49"/>
   <property id="MinWidth" type="Single" status="ByVal" opcode="UDC.50"/>
   <property id="MinHeight" type="Single" status="ByVal" opcode="UDC.51"/>
   <property id="ViewportLeft" type="Single" status="ByVal" opcode="UDC.52"/>
   <property id="ViewportHeight" type="Single" status="ByVal" opcode="UDC.53"/>
   <property id="ViewportTop" type="Single" status="ByVal" opcode="UDC.54"/>
   <property id="ViewportWidth" type="Single" status="ByVal" opcode="UDC.55"/>
   <property id="HyperLink" type="Variant" status="ByVal" opcode="UDC.56"/>
   <property id="ClientHeight" type="TwipsY" status="ByVal" opcode="UDC.57"/>
   <property id="ClientLeft" type="TwipsX" status="ByVal" opcode="UDC.58"/>
   <property id="ClientTop" type="TwipsY" status="ByVal" opcode="UDC.59"/>
   <property id="ClientWidth" type="TwipsX" status="ByVal" opcode="UDC.60"/>
   <property id="LockControls" type="Boolean" status="ByVal" opcode="UDC.61"/>
   <property id="NegotiateMenus" type="Boolean" status="ByVal" opcode="UDC.62"/>
   <method id="Refresh" type="Void" opcode="UDC.63"/>
   <method id="SetFocus" type="Void" opcode="UDC.64"/>
   <method id="PrintForm" type="Void" opcode="UDC.65"/>
   <method id="PopupMenu" type="Void" opcode="UDC.66">
      <argument id="Menu" type="Object" status="ByVal"/>
      <argument id="Flags" type="Variant" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="DefaultMenu" type="Variant" status="ByVal"/>
   </method>
   <method id="Circle" type="Void" opcode="UDC.67">
      <argument id="Step" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="Radius" type="Single" status="ByVal"/>
      <argument id="Color" type="ole_color" status="ByVal" optional="2"/>
      <argument id="Start" type="Single" status="ByVal" optional="0"/>
      <argument id="End" type="Single" status="ByVal" optional="6.283185"/>
      <argument id="Aspect" type="Single" status="ByVal" optional="1"/>
   </method>
   <method id="Cls" type="Void" opcode="UDC.68"/>
   <method id="Line" type="Void" opcode="UDC.69" syntax="Line.0"/>
   <method id="PaintPicture" type="Void" opcode="UDC.70">
      <argument id="Picture" type="FrxPicture" status="ByVal"/>
      <argument id="X1" type="Single" status="ByVal"/>
      <argument id="Y1" type="Single" status="ByVal"/>
      <argument id="Width1" type="Variant" status="ByVal"/>
      <argument id="Height1" type="Variant" status="ByVal"/>
      <argument id="X2" type="Variant" status="ByVal"/>
      <argument id="Y2" type="Variant" status="ByVal"/>
      <argument id="Width2" type="Variant" status="ByVal"/>
      <argument id="Height2" type="Variant" status="ByVal"/>
      <argument id="Opcode" type="Variant" status="ByVal"/>
   </method>
   <method id="Point" type="Long" opcode="UDC.71">
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </method>
   <method id="PSet" type="Void" opcode="UDC.72" syntax="PSet.0"/>
   <method id="Scale" type="Void" opcode="UDC.73" syntax="Scale.116"/>
   <method id="ScaleX" type="Single" opcode="UDC.74">
      <argument id="Width" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="ScaleY" type="Single" opcode="UDC.75">
      <argument id="Height" type="Single" status="ByVal"/>
      <argument id="FromScale" type="ScaleModeConstants" status="ByVal"/>
      <argument id="ToScale" type="ScaleModeConstants" status="ByVal"/>
   </method>
   <method id="TextWidth" type="Single" opcode="UDC.76">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="TextHeight" type="Single" opcode="UDC.77">
      <argument id="Str" type="String" status="ByVal"/>
   </method>
   <method id="ValidateControls" type="Void" opcode="UDC.78"/>
   <method id="OLEDrag" type="Void" opcode="UDC.79"/>
   <method id="PropertyChanged" type="Void" opcode="UDC.80">
      <argument id="PropertyName" type="Variant" status="ByVal"/>
   </method>
   <method id="SetViewport" type="Void" opcode="UDC.81">
      <argument id="Left" type="Single" status="ByVal"/>
      <argument id="Top" type="Single" status="ByVal"/>
   </method>
   <method id="AsyncRead" type="Void" opcode="UDC.82">
      <argument id="Target" type="String" status="ByVal"/>
      <argument id="AsyncType" type="Long" status="ByVal"/>
      <argument id="PropertyName" type="Variant" status="ByVal"/>
      <argument id="AsyncReadOptions" type="Variant" status="ByVal"/>
   </method>
   <method id="CancelAsyncRead" type="Void" opcode="UDC.83">
      <argument id="Property" type="Variant" status="ByVal"/>
   </method>
   <event id="Initialize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.84"/>
   <event id="DragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.85">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="UDC.86">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="Resize" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.87"/>
   <event id="Click" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.88"/>
   <event id="DblClick" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.89"/>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.90"/>
   <event id="KeyDown" netHandler="System.Windows.Forms.KeyEventHandler"
                       netArgs="System.Windows.Forms.KeyEventArgs"
                       opcode="UDC.91">
      <argument id="KeyCode" type="Integer" status="ByVal" migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal" cshPattern="if(e.Shift) %1d = 1; else %1d = 0" vbnPattern="%1d = e.Shift" />
   </event>
   <event id="KeyPress" netHandler="System.Windows.Forms.KeyPressEventHandler"
                        netArgs="System.Windows.Forms.KeyPressEventArgs"
                        opcode="UDC.92">
      <argument id="KeyAscii" type="Integer" status="ByVal" cshPattern="%1d = (int)e.KeyChar" vbnPattern="%1d = Asc(e.KeyChar)" />
   </event>
   <event id="KeyUp" netHandler="System.Windows.Forms.KeyEventHandler"
                     netArgs="System.Windows.Forms.KeyEventArgs"
                     opcode="UDC.93">
      <argument id="KeyCode" type="Integer" status="ByVal"
                             migPattern="%1d = e.KeyValue" />
      <argument id="Shift" type="Integer" status="ByVal"
                cshPattern="if(e.Shift) %1d = 1; else %1d = 0"
                vbnPattern="%1d = e.Shift" />
   </event>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.94"/>
   <event id="MouseDown" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="UDC.95">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="MouseMove" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="UDC.96">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="MouseUp" netHandler="System.Windows.Forms.MouseEventHandler" netArgs="System.Windows.Forms.MouseEventArgs" opcode="UDC.97">
      <argument id="Button" type="Integer" status="ByVal"
         cshPattern="%1d = (int)e.Button / 0x100000"
         vbnPattern="%1d = e.Button \ &H100000"
      />
      <argument id="Shift" type="Integer" status="ByVal"
         cshPattern="%1d = (int)System.Windows.Forms.Control.ModifierKeys / 0x10000"
         vbnPattern="%1d = System.Windows.Forms.Control.ModifierKeys \ &H10000"
      />
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="Paint" netHandler="System.Windows.Forms.PaintEventHandler" netArgs="System.Windows.Forms.PaintEventArgs" opcode="UDC.98"/>
   <event id="Terminate" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.99"/>
   <event id="OLEDragOver" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.100">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal"/>
   </event>
   <event id="OLEDragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.101">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="Button" type="Integer" status="ByVal"/>
      <argument id="Shift" type="Integer" status="ByVal"/>
      <argument id="X" type="Single" status="ByVal"/>
      <argument id="Y" type="Single" status="ByVal"/>
   </event>
   <event id="OLEGiveFeedback" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.102">
      <argument id="Effect" type="Long" status="ByVal"/>
      <argument id="DefaultCursors" type="Boolean" status="ByVal"/>
   </event>
   <event id="OLEStartDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.103">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="AllowedEffects" type="Long" status="ByVal"/>
   </event>
   <event id="OLESetData" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.104">
      <argument id="Data" type="Object" status="ByVal"/>
      <argument id="DataFormat" type="Integer" status="ByVal"/>
   </event>
   <event id="OLECompleteDrag" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.105">
      <argument id="Effect" type="Long" status="ByVal"/>
   </event>
   <event id="WriteProperties" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.106">
      <argument id="PropBag" type="Object" status="ByVal"/>
   </event>
   <event id="ReadProperties" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.107">
      <argument id="PropBag" type="Object" status="ByVal"/>
   </event>
   <event id="InitProperties" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.108"/>
   <event id="AsyncReadComplete" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.109">
      <argument id="AsyncProp" type="Object" status="ByVal"/>
   </event>
   <event id="EnterFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.110"/>
   <event id="ExitFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.111"/>
   <event id="Show" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.112"/>
   <event id="Hide" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.113"/>
   <event id="Scroll" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.114"/>
   <event id="AsyncReadProgress" netHandler="System.EventHandler" netArgs="EventArgs" opcode="UDC.115">
      <argument id="AsyncProp" type="Object" status="ByVal"/>
   </event>
</class>
<class id="VBControlExtender" parent="None" default="Index" opcode="VCX">
   <property id="Name" type="String" status="ByVal" opcode="VCX.0" />
   <property id="Index" type="Integer" status="ByVal" opcode="VCX.1"/>
   <property id="Left" type="TwipsX" status="ByVal" opcode="VCX.2"/>
   <property id="Top" type="TwipsY" status="ByVal" opcode="VCX.3"/>
   <property id="Width" type="TwipsX" status="ByVal" opcode="VCX.4"/>
   <property id="Height" type="TwipsY" status="ByVal" opcode="VCX.5"/>
   <property id="Visible" type="Boolean" status="ByVal" opcode="VCX.6"/>
   <property id="Parent" type="Object" status="ByVal" opcode="VCX.7"/>
   <property id="DragMode" type="Integer" status="ByVal" opcode="VCX.8"/>
   <property id="DragIcon" type="Icon" status="ByVal" opcode="VCX.9"/>
   <property id="Tag" type="String" status="ByVal" opcode="VCX.10"/>
   <property id="Enabled" type="Boolean" status="ByVal" opcode="VCX.11"/>
   <property id="TabStop" type="Boolean" status="ByVal" opcode="VCX.12"/>
   <property id="TabIndex" type="Integer" status="ByVal" opcode="VCX.13"/>
   <property id="object" type="Object" status="ByVal" opcode="VCX.14"/>
   <property id="DataFormat" type="Object" status="ByVal" opcode="VCX.15"/>
   <property id="DataMember" type="Object" status="ByVal" opcode="VCX.16"/>
   <property id="DataSource" type="Object" status="ByVal" opcode="VCX.17"/>
   <property id="HelpContextID" type="Integer" status="GetSet" opcode="VCX.18">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetHelpContextID(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetHelpContextID(%2d,%1d)\c" />
   </property>
   <property id="Default" type="Boolean" status="ByVal" opcode="VCX.19"/>
   <property id="Cancel" type="Boolean" status="ByVal" opcode="VCX.20"/>
   <property id="Align" type="AlignConstants" status="GetSet" opcode="VCX.21" />
   <pattern id="Align.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetAlign(%1d)" />
   </pattern>
   <pattern id="Align.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetAlign(%2d, %1d)\c" />
   </pattern>
   <property id="DataChanged" type="Boolean" status="GetSet" opcode="VCX.22" >
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetDataChanged(%1d)" />
     <Set npram="2" migPattern="gmRTL.GUI.ControlHelper.SetDataChanged(%2d,%1d)\c" />
   </property>
   <property id="DataField" type="String" status="ByVal" opcode="VCX.23"/>
   <property id="WhatsThisHelpID" type="Long" status="GetSet" opcode="VCX.24"/>
   <pattern id="WhatsThisHelpID.Get" >
      <all narg="1" code="gmRTL.GUI.ControlHelper.GetWhatsThisHelpID(%1d)" />
   </pattern>
   <pattern id="WhatsThisHelpID.Set" >
      <all narg="2" code="gmRTL.GUI.ControlHelper.SetWhatsThisHelpID(%2d,%1d)\c" />
   </pattern>
   <property id="Container" type="IdeControl" status="ByVal" opcode="VCX.25"/>
   <property id="CausesValidation" type="Boolean" status="ByVal" opcode="VCX.26"/>
   <property id="DataBindings" type="Object" status="ByVal" opcode="VCX.27"/>
   <property id="ToolTipText" type="String" status="GetSet" opcode="VCX.28">
     <Get npram="1" migPattern="ToolTip1.GetToolTip(%1d)" />
     <Set npram="2" migPattern="ToolTip1.SetToolTip(%2d, %1d)\c" />
   </property>
   <method id="SetFocus" type="Void" status="ByVal" opcode="VCX.29"/>
   <method id="ZOrder" type="Void" status="ByVal" opcode="VCX.30">
     <argument id="Position" type="Variant" status="ByVal" optional="%0%" />
   </method>
   <method id="Move" type="Void" opcode="VCX.31">
     <argument id="Left" type="Integer" status="ByVal" />
     <argument id="Top" type="Integer" status="ByVal" optional="Default" />
     <argument id="Width" type="Integer" status="ByVal" optional="Default" />
     <argument id="Height" type="Integer" status="ByVal" optional="Default" />
   </method>
   <property id="Drag" type="Void" status="ByVal" opcode="VCX.32"/>
   <property id="ShowWhatsThis" type="Void" status="ByVal" opcode="VCX.33"/>
   <event id="GotFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VCX.34"/>
   <event id="LostFocus" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VCX.35"/>
   <event id="DeprecatedEvent1" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VCX.36"/>
   <event id="DeprecatedEvent2" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VCX.37">
      <argument id="Param1" type="Integer" status="ByVal"/>
   </event>
   <event id="DeprecatedEvent3" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VCX.38">
      <argument id="Param1" type="Integer" status="ByVal"/>
   </event>
   <event id="DeprecatedEvent4" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VCX.39"/>
   <event id="DragDrop" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VCX.40">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
   </event>
   <event id="DragOver" netHandler="System.Windows.Forms.DragEventHandler" netArgs="System.Windows.Forms.DragEventArgs" opcode="VCX.41">
      <argument id="Source" type="Control" status="ByVal"/>
      <argument id="X" type="Integer" status="ByVal"/>
      <argument id="Y" type="Integer" status="ByVal"/>
      <argument id="State" type="Integer" status="ByVal" migPattern="%1d = e.KeyState" />
   </event>
   <pattern id="DragOver.Source">
      <wpb nArg="1" code="%1d = CType(e.Data.GetData(GetType(WeakReference)).Target,System.Windows.Controls.Control)" />
      <wpf nArg="1" code="%1d = ((WeakReference)e.Data.GetData(typeof(WeakReference))).Target as System.Windows.Controls.Control" />
      <csh nArg="1" code="%1d = (System.Windows.Forms.Control)e.Data" />
      <vbn nArg="1" code="%1d = CType(e.Data,System.Windows.Forms.Control)" />
   </pattern>
   <event id="Validate" netHandler="System.ComponentModel.CancelEventHandler" netArgs="System.ComponentModel.CancelEventArgs" opcode="VCX.42">
      <argument id="Cancel" type="Boolean" status="ByVal"/>
   </event>
   <event id="ObjectEvent" netHandler="System.EventHandler" netArgs="EventArgs" opcode="VCX.43">
      <argument id="Info" type="Object" status="ByVal" migPattern="%1d = gmRTL.GUI.ControlHelper.GetEventInfo(sender)" />
   </event>
</class>
<class id="Font" parent="None" default="Name" opcode="FNT" Creatable="off" >
   <property id="Name" type="String" status="GetSet" opcode="FNT.0">
     <Get npram="1" migPattern="%1d.Name" />
     <Set npram="2" migPattern="%2d = gmRTL.GUI.FontHelper.SetName(%2d, %1d)\c" />
   </property>
   <property id="Size" type="Single" status="GetSet" opcode="FNT.1">
     <Get npram="1" migPattern="%1d.Size" />
     <Set npram="2" migPattern="%2d = gmRTL.GUI.FontHelper.SetSize(%2d, %1d)\c" />
   </property>
   <property id="Charset" type="Integer" status="GetSet" opcode="FNT.2">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetCharset(%1d)" />
     <Set npram="2" migPattern="%2d = gmRTL.GUI.ControlHelper.SetCharset(%2d, %1d)\c" />
   </property>
   <property id="Weight" type="Integer" status="GetSet" opcode="FNT.3">
     <Get npram="1" migPattern="gmRTL.GUI.ControlHelper.GetFontWeight(%1d)" />
     <Set npram="2" migPattern="%2d = gmRTL.GUI.FontHelper.SetWeight(%2d, %1d)\c" />
   </property>
   <property id="Underline" type="Boolean" status="GetSet" opcode="FNT.4">
     <Get npram="1" migPattern="%1d.Underline" />
     <Set npram="2" migPattern="%2d = gmRTL.GUI.FontHelper.SetUnderline(%2d, %1d)\c" />
   </property>
   <property id="Italic" type="Boolean" status="GetSet" opcode="FNT.5">
     <Get npram="1" migPattern="%1d.Italic" />
     <Set npram="2" migPattern="%2d = gmRTL.GUI.FontHelper.SetItalic(%2d, %1d)\c" />
   </property>
   <property id="Strikethrough" type="Boolean" status="GetSet" opcode="FNT.6">
     <Get npram="1" migPattern="%1d.Strikeout" />
     <Set npram="2" migPattern="%2d = gmRTL.GUI.FontHelper.SetStrikeout(%2d, %1d)\c" />
   </property>
   <property id="Bold" type="Boolean" status="GetSet" opcode="FNT.7">
     <Get npram="1" migPattern="%1d.Bold" />
     <Set npram="2" migPattern="%2d = gmRTL.GUI.FontHelper.SetBold(%2d, %1d)\c" />
   </property>
</class>
<class id="Collection" parent="None" default="ItemMethod" opcode="COL">
   <property id="_NewEnum" type="Variant" status="Out" opcode="COL.9"/>
   <property id="Count" type="Integer" status="ByVal" opcode="COL.0"/>
   <property id="UBound" type="Integer" status="ByVal" opcode="COL.6"/>
   <property id="LBound" type="Integer" status="ByVal" opcode="COL.8"/>
   <method id="Add" type="String" opcode="COL.1">
      <argument id="Item" type="Variant" status="ByVal"/>
      <argument id="Key" type="String" status="ByVal" optional="DEF.NullObject"/>
      <argument id="Before" type="Variant" status="ByVal" optional="%15%"/>
      <argument id="After" type="Variant" status="ByVal" optional="%15%"/>
   </method>
   <method id="ItemMethod" type="Variant" opcode="COL.2">
      <argument id="Index" type="Variant" status="ByVal"/>
   </method>
   <method id="Item" type="Variant" opcode="COL.4">
      <argument id="Index" type="Variant" status="ByVal"/>
   </method>
   <method id="Remove" type="Single" opcode="COL.3">
      <argument id="Index" type="Variant" status="ByVal"/>
   </method>
   <method id="ControlAdd" type="Control" opcode="COL.ControlAdd" >
      <argument id="ProgID" type="String" status="ByVal" />
      <argument id="Name" type="String" status="ByVal"/>
      <argument id="Container" type="Variant" status="ByVal" optional="DEF.NullObject"/>
   </method>
</class>
<class id="Err" parent="None" default="Number" opcode="ERR">
   <property id="Number" type="Integer" status="ByVal" opcode="ERR.Number"/>
   <property id="Source" type="String" status="ByVal" opcode="ERR.Source"/>
   <property id="Description" type="String" status="ByVal" opcode="ERR.Description"/>
   <property id="HelpFile" type="String" status="ByVal" opcode="ERR.HelpFile"/>
   <property id="HelpContext" type="Long" status="ByVal" opcode="ERR.HelpContext"/>
   <property id="LastDllError" type="Long" status="ByVal" opcode="ERR.LastDllError" />
   <method id="Clear" type="void" opcode="ERR.Clear" />
   <method id="Raise" type="void" opcode="ERR.Raise" >
      <argument id="Number"       status="ByVal" type="Long" />
      <argument id="Source"       status="ByVal" type="String" optional="%14%" />
      <argument id="Description"  status="ByVal" type="String" optional="%14%" />
      <argument id="HelpFile"     status="ByVal" type="String" optional="%13%" />
      <argument id="HelpContext"  status="ByVal" type="String" optional="%13%" />
   </method>
   <property id="ASPCode" type="Variant" status="ByVal" opcode="ERR.ASPCode" />
   <property id="ASPDescription" type="Variant" status="ByVal" opcode="ERR.ASPDescription" />
   <property id="Category" type="Variant" status="ByVal" opcode="ERR.Category" />
   <property id="File" type="Variant" status="ByVal" opcode="ERR.File" />
   <property id="Line" type="Variant" status="ByVal" opcode="ERR.Line" />
   <property id="Column" type="Variant" status="ByVal" opcode="ERR.Column" />
</class>
<class id="PropertyBag" parent="None" opcode="PBG">
   <property id="Contents" type="Variant" status="ByVal" opcode="PBG.0"/>
   <method id="ReadProperty" type="Variant" opcode="PBG.1">
      <argument id="Name" type="String" status="ByVal"/>
      <argument id="DefaultValue" type="Variant" status="ByVal" optional="Default"/>
   </method>
   <method id="WriteProperty" type="Void" opcode="PBG.2">
      <argument id="Name" type="String" status="ByVal" />
      <argument id="Value" type="Variant" status="ByVal"/>
      <argument id="DefaultValue" type="Variant" status="ByVal" optional="Default"/>
   </method>
</class>
</MetaLanguage>
