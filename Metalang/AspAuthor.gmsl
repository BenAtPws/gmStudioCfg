void AspAuthorInterface(int aspRoot)
{
   tInfoFile  aspInfo;
   int        nInc;
   int        vbRoot[256];
   int        inc;
   string     ident;
   int        intRoot;

   aspInfo = Store.GetVector(aspRoot);
   if(aspInfo.INCLUDE && !aspInfo.USERCONTROL && aspInfo.interfaces && aspInfo.vbName)
   {
      Store.GetInfo(aspInfo.interfaces, vbRoot);
      nInc = vbRoot(0);
      if(nInc <= 1) return;
      intRoot = vbRoot(1);
      ident = Store.GetIdent(intRoot);
      if(Select.Dialect == Dialects.vbn)
      {
         Write.Line("Public Interface " + ident);
      }
      else
      {
         Write.Line("public interface " + ident);
         Write.Line("{");
      }
      Write.ChangeMargin(1);
      inc = 2;
      while(inc <= nInc)
      {
         Runtime.InterfaceEntry(vbRoot(inc));
         inc = inc + 1;
      }
      Write.ChangeMargin(-1);
      if(Select.Dialect == Dialects.vbn) Write.Line("End Interface");
      else Write.Line("}");
   }
}

void AspAuthorXmlComment(string comment,string context,int incRoot,int iSeq)
{
   tInfoFile  aspInfo;
   string     authorMarkup;
   string     locName;
   string     includeName;
   int        length;
   int        localStart;
   int        xtnStart;
   string     PageClassName;

   if(incRoot == 0)
   {
      if(context == "c")
      {
         if(Select.Dialect == Dialects.csh) Write.Text("// ");
         else Write.Text("' ");
         Write.Text(comment);
      }
      else
      {
         Write.Text("<!-- ");
         Write.Text(comment);
         Write.Text(" -->");
      }
      Write.Record();
   }
   else
   {
      aspInfo = Store.GetVector(incRoot);
      if(!aspInfo.USERCONTROL)
      {
         authorMarkup = Symbol.UseTemplate("AuthorMarkup",NULL);
         if(Store.FindVector(authorMarkup,incRoot) != 0)
         {
            Write.Text("<% ");
            Write.Text(Store.GetIdent(aspInfo.vbName));
            Write.Text("1.");
            Write.Text(authorMarkup);
            Write.Text("()");
            if(Select.Dialect == Dialects.csh) Write.Character(";");
            Write.Text(" %>");
            Write.Record();
            return;
         }
      }
      if(!aspInfo.USERCONTROL)
      {
         if(!aspInfo.INCLUDE || !aspInfo.HASMARKUP) return;
      }
      if(Select.UseUserControls)
      {
         if(aspInfo.USERCONTROL)
         {
            locName = Character.Substr(Store.GetString(aspInfo.migComment),0,-5);
            locName = Character.Replace(locName,@"\","_");
            locName = Character.Replace(locName," ","_");
            locName = Character.Replace(locName,"-","_");
            Write.Text("<inc:");
            Write.Text(locName);
            Write.Text(" ID=""");
            Write.Text(Store.GetName(aspInfo.vbName));
            Write.Integer(iSeq,0);
            Write.Character("""");
            Write.Text(" runat=""server"" />");
            Write.Record();
            return;
         }
      }
      if(aspInfo.HASMARKUP || aspInfo.CROSSREF)
      {
         includeName = Store.GetIdent(incRoot);
         length = System.ParseFileName(includeName,localStart,xtnStart);
         if(Select.VirtualRoot == Character.Substr(includeName,0,localStart-1))
         {
            includeName = Character.Substr(includeName,localStart,xtnStart-localStart) + ".ascx";
         }
         else
         {
            includeName = Character.Substr(includeName,0,xtnStart) + ".ascx";
         }
         PageClassName = Store.GetName(aspInfo.vbName);
         #TextStart
         <%@ Register TagPrefix="Inc" TagName="(%= PageClassName %)" src="(%= IncludeName %)" %>
         <Inc:(%= PageClassName %) runat="server" id="(%= PageClassName %)1" />
         #TextEnd
      }
   }
}
