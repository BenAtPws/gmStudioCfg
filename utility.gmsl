void RegisterExtensionNamespace(int subRoot,string namespace)
{
   
   FileSystem.LogMessage("Utility.RegisterExtensionNamespace(" + subRoot + ", " + namespace + ")");
   
  // string     libNumber;
  // tVbSub     subInfo;
  // tVbName    vbInfo;
  // tInfoFile  fileInfo
  // int        iLib;
  // 
  // libNumber = Registry.GetNameValue("ExtensionLibraries",namespace);
  // if (libNumber=="") 
  // {
  //    if (Select.IssueWarnings) System.LogMessage("WARNING#888: Unable to find entry " + namespace + " in Registry\ExtensionLibraries");
  //    return;
  // }
  // if(Registry.GetNameValue("SupportLibrary",libNumber) == null)
  // {
  //    Registry.Declare("SupportLibrary",libNumber,namespace +".");
  // }
  // subInfo = new tVbSub(subRoot);
  // vbInfo = new tVbName(subInfo.vbName);
  // fileInfo = new tInfoFile(vbInfo.name,true);
  // iLib = libNumber;
  // fileInfo.supportLibrarys = fileInfo.supportLibrarys + mask(iLib);
  // return;
}

int FindReferenceFile(string refName)
{
   string location;
   int    iPass;
   string refpath;

   iPass = 0;
   while(iPass < 3)
   {
      if(iPass == 0) location = Select.target;
      else if(iPass == 1) location = Select.local;
      else location = Select.system;
      refpath = location + @"\" + refName + ".xml";
      if(System.FileExists(refpath)) return 1;
      iPass = iPass + 1;
   }
   return 0;
}

void BuildOrder_ScriptCommand()
{
   int       nBuild;
   int       iRoot;
   int       stack[128];
   int       Order[2048];
   tInfoFile vbpInfo;
   bool      isFinished;
   int       nTest;
   int       iBuild;
   Handle    textStream;
   int       nRecord;
   int       curRecord;
   string    record;
   int       length;
   int       rai;
   int       nString;
   string    refName;
   string    basName;
   int       iRefer;
   tVbName   vbName;
   tInfoFile refInfo;
   int       lBuild;
   int       is;
   string    projectFile;
   bool      exists;      

   nBuild = 0;
   iRoot = Store.FindFirstChild(stack,0)
   while(iRoot != 0)
   {
      if(Store.GetObjectType(iRoot) == ObjectType.ProjectFile)
      {
         if(nBuild >= 2048)
         {
            System.LogMessage("The number of projects exceeds the maximum allowed of 2048.");
            return;
         }
         vbpInfo = Store.DeltaVector(iRoot);
         vbpInfo.migRuntime = nBuild;
         Order[nBuild] = iRoot;
         nBuild = nBuild + 1;
         vbpInfo.migTransform = 0;
      }
      iRoot = Store.FindNextChild(stack)
   }
   nTest = 0;
   isFinished = False;
   while(nTest < nBuild && !isFinished)
   {
      nTest = nTest + 1;
      isFinished = True;
      iBuild = 0;
      while(iBuild < nBuild)
      {
         iRoot = Order[iBuild];
         vbpInfo = Store.GetVector(iRoot);
         textStream = Text.Open(Store.GetHandle(), vbpInfo.textBase);
         nRecord = Text.Maximum(textStream);
         curRecord = 0;
         while(curRecord < nRecord)
         {
            curRecord = curRecord + 1;
            Text.Position(textStream, curRecord);
            record = Text.Access(textStream, length, rai, 0);
            nString = 0;
            if(length > 12)
            {
               if(Character.Compare(record,"Reference=",10) == 0)
               {
                  nString = length - 10;
                  refName = Character.Substr(record,10,nString);
                  if (Character.FindFirst(refName,0,".RLL#"))  nString = 0;
               }
               else if(Character.Compare(record,"Object=",7) == 0)
               {
                  nString = length - 7;
                  refName = Character.Substr(record,7,nString);
               }
            }
            if(nString)
            {
               basName = Symbol.ReferenceName(refName);
               if(!basName)
               { 
                  iRefer = 0;
               }
               else
               {
                  iRefer = Store.FindVector(basName,0);
                  if(iRefer == 0) 
                  {
                     iRefer = Store.Vector(basName,0,sizeof(tVbName),ObjectType.Vb_Name);
                  }
               }
               if(iRefer != 0)
               {
                  vbName = Store.GetVector(iRefer);
                  iRefer = vbName.name;
               }
               if(iRefer != 0)
               {
                  if(Store.GetObjectType(iRefer) != ObjectType.ProjectFile)
                  {
                     System.LogMessage("The component " + Store.GetIdent(iRoot) + " is not a VBP_FILE");
                     return;
                  }
                  refInfo = Store.GetVector(iRefer);
                  lBuild = refInfo.migRuntime;
                  if(lBuild > iBuild)
                  {
                     refInfo = Store.DeltaVector(iRefer);
                     if(refInfo.migTransform != 0)
                     {
                        if(refInfo.migTransform > 0)
                        {
                           Write.Line("Circular reference between <" + Store.GetIdent(iRefer) + "> and <"
                                      + Store.GetIdent(refInfo.migTransform) + ">");
                           refInfo.migTransform = -refInfo.migTransform;
                        }
                     }
                     else
                     {
                        is = lBuild;
                        while(is > iBuild)
                        {
                           iRoot = Order[is-1];
                           refInfo = Store.DeltaVector(iRoot);
                           refInfo.migRuntime = is;
                           Order[is] = iRoot;
                           is = is - 1;    
                        }
                        refInfo = Store.DeltaVector(iRefer);
                        refInfo.migRuntime = iBuild;
                        refInfo.migTransform = Order[iBuild];
                        Order[iBuild] = iRefer;
                        isFinished = False;
                        break;
                     }
                  }
               }
            }
         }
         Text.Close(textStream);
         iBuild = iBuild + 1;
         if(!isFinished) break;
      }
   }
   Write.Line("The ordering over " + nBuild + " projects converged.");
   iRoot = Store.FindFirstChild(stack,0)
   while(iRoot != 0)
   {
      if(Store.GetObjectType(iRoot) == ObjectType.ProjectFile)
      {
         vbpInfo = Store.DeltaVector(iRoot);
         vbpInfo.migTransform = 0;
      }
      iRoot = Store.FindNextChild(stack)
   }
   Write.Line("There were " + nTest + " order test iterations");

   iBuild = 0;
   while(iBuild < nBuild)
   {
      iRoot = Order[iBuild];
      projectFile = Store.GetName(iRoot);
      vbpInfo = Store.GetVector(iRoot);
      Write.Character("(");
      Write.Integer(vbpInfo.migRuntime+1,0);
      Write.Character(")");
      Write.Text(projectFile);
      Write.Record();
      textStream = Text.Open(Store.GetHandle(),vbpInfo.textBase);
      nRecord = Text.Maximum(textStream);
      curRecord = 0;
      while(curRecord < nRecord)
      {
         curRecord = curRecord + 1;
         Text.Position(textStream, curRecord);
         record = Text.Access(textStream, length, rai, 0);
         nString = 0;
         if(length > 12)
         {
            if(Character.Compare(record,"Reference=",10) == 0)
            {
               nString = length - 10;
               refName = Character.Substr(record,10,nString);
               if (Character.FindFirst(refName,0,".RLL#"))  nString = 0;
            }
            else if(Character.Compare(record,"Object=",7) == 0)
            {
               nString = length - 7;
               refName = Character.Substr(record,7,nString);
            }
         }
         if(nString != 0)
         {
            basName = Symbol.ReferenceName(refName);
            if(!basName) iRefer = 0;
            else iRefer = Store.FindVector(basName,0);
            Write.ChangeMargin(1);
            Write.Character("(");
            if(iRefer != 0)
            {
               vbName = Store.GetVector(iRefer);
               iRefer = vbName.name;
            }
            if(iRefer != 0)
            {
               refInfo = Store.GetVector(iRefer);
               Write.Integer(refInfo.migRuntime,0);
            }
            else 
            {
               if(!basName) Write.Character("x");
               else
               {
                  exists = FindReferenceFile(basName);
                  if(exists) Write.Character("I");
                  else Write.Character("x");
               }
            }
            Write.Character(")");
            Write.Text(refName);
            Write.Record();
            Write.ChangeMargin(-1);
         }
      }
      Text.Close(textStream);
      iBuild = iBuild + 1;
   }
   nTest = 0;
   iBuild = Store.GetFirst(0);
   while(iBuild != 0)
   {
      if(Store.GetObjectType(iBuild) == ObjectType.Vb_Name)
      {
         vbName = Store.GetVector(iBuild);
         if(!vbName.name)
         {
            exists = FindReferenceFile(Store.GetName(iBuild));
            if(!exists) nTest = nTest + 1;
            else
            {
               Write.Text("<Reference id=""");
               Write.Text(Store.GetName(iBuild));
               Write.Character("""");
               Write.Text("/>");
               Write.Record();
            }
         }
      }
      iBuild = Store.GetNext(iBuild);
   }
   if(nTest)
   {
      Write.Line("There were " + nTest + " unsatisfied references");
      nTest = 0;
      iBuild = Store.GetFirst(0);
      while(iBuild)
      {
         if(Store.GetObjectType(iBuild) == ObjectType.Vb_Name)
         {
            vbName = Store.GetVector(iBuild);
            if(!vbName.name)
            {
               exists = FindReferenceFile(Store.GetName(iBuild));
               if(!exists)
               {
                  nTest = nTest + 1;
                  Write.Character("(");
                  Write.Integer(nTest,0);
                  Write.Character(")");
                  Write.Text(Store.GetName(iBuild));
                  Write.Record();
               }
            }
         }
         iBuild = Store.GetNext(iBuild);
      }
   }
   iBuild = 0;
   while(iBuild < nBuild)
   {
      iRoot = Order[iBuild];
      Write.Text("<Compile project=""");
      Write.Text(Store.GetName(iRoot));
      Write.Character("""");
      Write.Text("/>");
      Write.Record();
      iBuild = iBuild + 1;
   }
}

