void SharedFile_ScriptCommand()
{
   int        iRoot;
   int        stack[20];
   int        objType;
   string     refName;
   Handle     symbols;
   int        symbolRoot;
   int        iChild;
   int        nChild;
   int        nShare;
   int        nModule;
   int        nForm;
   int        nClass;
   int        iSym;
   int        parent;
   tInfoFile  infoFile;

   nShare = 0;
   nModule = 0;
   nForm = 0;
   nClass = 0;
   iRoot = Store.FindFirstChild(stack,0);
   while(iRoot)
   {
      objType = Store.GetObjectType(iRoot);
      if(objType == ObjectType.ModuleFile || objType == ObjectType.FormFile || objType == ObjectType.ClassFile)
      {
         refName = Store.GetIdent(iRoot);
         symbolRoot = Store.GetSymbols(refName);
         if(symbolRoot == 0)
         {
            nChild = 0;
            iChild = 0;
         }
         else
         {
            symbols = Sequence.Open(symbolRoot);
            nChild = Sequence.GetLength(symbols);
            iChild = Sequence.Access(symbols,1);
            Sequence.Close(symbols);
         }
         if(nChild > 1 && iChild == iRoot)
         {
            nShare = nShare + 1;
            if(objType == ObjectType.ModuleFile) nModule = nModule + 1;
            else if(objType == ObjectType.FormFile) nForm = nForm + 1;
            else nClass = nClass + 1;
         }
      }
      iRoot = Store.FindNextChild(stack);
   }
   if(nShare == 0)
   {
      Write.Line("There were no Shared Files in this group of projects");
      return;
   }
   Write.Text("There were ");
   Write.Integer(nShare,0);
   Write.Text(" Shared Files in this group of projects: Modules = ");
   Write.Integer(nModule,0);
   Write.Text(", Forms = ");
   Write.Integer(nForm, 0);
   Write.Text(" Classes = ");
   Write.Integer(nClass, 0);
   Write.Record();
   iRoot = Store.FindFirstChild(stack,0);
   while(iRoot)
   {
      objType = Store.GetObjectType(iRoot);
      if(objType == ObjectType.ModuleFile || objType == ObjectType.FormFile || objType == objectType.ClassFile)
      {
         refName = Store.GetIdent(iRoot);
         symbolRoot = Store.GetSymbols(refName);
         if(symbolRoot == 0)
         {
            nChild = 0;
            iChild = 0;
         }
         else
         {
            symbols = Sequence.Open(symbolRoot);
            nChild = Sequence.GetLength(symbols);
            iChild = Sequence.Access(symbols,1);
            Sequence.Close(symbols);
         }
         if(nChild > 1 && iChild == iRoot)
         {
            if(objType == ObjectType.ModuleFile)
            {
               Write.Line("The Module file [" + refName + "] is shared by " + nChild + " projects");
            }
            else if(objType == ObjectType.FormFile)
            {
               Write.Line("The Form file [" + refName + "] is shared by " + nChild + " projects");
            }
            else
            {
               Write.Line("The Class file [" + refName + "] is shared by " + nChild + " projects");
            }
            if(nChild)
            {
               symbols = Sequence.Open(symbolRoot);
               iSym = 1;
               while(iSym <= nChild)
               { 
                  iChild = Sequence.Access(symbols,iSym);
                  parent = Store.GetParent(iChild);
                  Write.Line("   (" + iSym +") " + Store.GetIdent(parent));
                  iSym = iSym + 1;
               }
               Sequence.Close(symbols);
            }
         }
      }
      iRoot = Store.FindNextChild(stack);
   }
   iRoot = Store.FindFirstChild(stack,0);
   while(iRoot)
   {
      objType = Store.GetObjectType(iRoot);
      if(objType == ObjectType.ModuleFile || objType == ObjectType.FormFile || objType == objectType.ClassFile)
      {
         refName = Store.GetIdent(iRoot);
         symbolRoot = Store.GetSymbols(refName);
         if(symbolRoot == 0)
         {
            nChild = 0;
            iChild = 0;
         }
         else
         {
            symbols = Sequence.Open(symbolRoot);
            nChild = Sequence.GetLength(symbols);
            iChild = Sequence.Access(symbols,1);
            Sequence.Close(symbols);
         }
         if(nChild > 1 && iChild == iRoot)
         {
            parent = Store.GetParent(iChild);
            infoFile = Store.GetVector(parent);
            if(infoFile.libName == 0)
            {
               Write.Text("   <Registry type=""SharedFile"" Source=""");
               Write.Text(refName);
               Write.Text(""" Target=""");
               Write.Text(Store.GetIdent(parent));
               Write.Text(""" />");
               Write.Record();
            }
            else
            {
               Write.Text("   <Registry type=""SharedFile"" Source=""");
               Write.Text(refName);
               Write.Text(""" Target=""");
               Write.Text(Store.GetIdent(parent));
               Write.Character(";");
               Write.Text(Store.GetIdent(infoFile.libName));
               Write.Text(""" />");
               Write.Record();
            }
         }
      }
      iRoot = Store.FindNextChild(stack);
   }
}

void SharedFile_MakeModuleGlobal(int parent,int globalHost)
{
   int childRoot;

   childRoot = Store.GetFirst(parent);
   while(childRoot)
   {
      Store.AddGlobal(childRoot,-globalHost);
      childRoot = Store.GetNext(childRoot);
   }
}

void SharedFile_FindDefined()
{
   int        iShare;
   int        clsRoot;
   int        levels[20];
   int        objType;
   string     refName;
   string     projName;
   int        oldUnit;
   int        projRoot;
   tInfoFile  fileInfo;
   int        iSemi;
   int        MAX_MOVE=64;
   int        needMove[64];
   int        nNeedMove;

   if(! Select.SharedFile || ! Select.globalSettings) return;
   oldUnit = Store.Unit();
   for(clsRoot = Store.FindFirstChild(levels,0); clsRoot; clsRoot = Store.FindNextChild(levels))
   {
      objType = Store.GetObjectType(clsRoot);
      if(objType == ObjectType.ModuleFile || objType == ObjectType.FormFile || objType == ObjectType.ClassFile)
      {
         refName = Store.GetIdent(clsRoot);
         Store.Select(StorageUnit.CLIENT);
         projName = Registry.GetNameValue("SharedFile",refName,projName);
         Store.Select(oldUnit);
         if(projName)
         {
            iSemi = Character.FindFirst(projName,0,";");
            if(iSemi) projName = Character.Substr(projName,0,iSemi-1);
            projRoot = Store.FindVector(projName,0);
            if(projRoot)
            {
               if(objType == ObjectType.FormFile)
               {
                  fileInfo = Store.DeltaVector(projRoot);
                  fileInfo.PrjDefInstance = True;
                  fileInfo = Store.DeltaVector(clsRoot);
                  fileInfo.SharedFile = True;
               }
               if (nNeedMove>=MAX_MOVE)
               {
                  System.LogMessage("ERR#999: SharedFile.gmsl:SharedFile_FindDefined.MAX_MOVE limit exceeded");
                  return;
               }
               needMove[nNeedMove] = clsRoot;
               nNeedMove = nNeedMove + 1;
            }
         }
      }
   }
   if(nNeedMove == 0) return;
   for(iShare = 0; iShare < nNeedMove; iShare = iShare + 1)
   {
      clsRoot = needMove[iShare];
      fileInfo = Store.DeltaVector(clsRoot);
      fileInfo.Exposed = True;
   }
}
