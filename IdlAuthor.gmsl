void IdlWriteEnumeration(int enumRoot)
{
   int         iRoot;
   tEnumEntry  enumEntry;
   int         base;
   int         value;

   Write.Text("<enumeration id=""");
   Write.Text(Store.GetIdent(enumRoot));
   Write.Character("""");
   Write.Character(">");
   Write.Record();
   Write.ChangeMargin(1);
   for(iRoot = Store.GetFirst(enumRoot); iRoot; iRoot = Store.GetNext(iRoot))
   {
      enumEntry = Store.GetVector(iRoot);
      base = enumEntry.base;
      value = enumEntry.value;
      Write.Text("<entry id=""");
      Write.Text(Store.GetIdent(iRoot));
      Write.Character("""");
      Write.Text(" value=""");
      if(base == 10) Write.Integer(value,0);
      else Write.Text("0x" + Character.HexiDecimal(value,base));
      Write.Character("""");
      Write.Text("/>");
      Write.Record();
   }
   Write.ChangeMargin(-1);
   Write.Text("</enumeration>");
   Write.Record();
}

void IdlWriteType(int itype,int hostType,int libRoot)
{
   int          objType;
   tForwardRef  forwardRef;
   int          forwardAdr;
   string       ident;
   int          parent;
   tIdlLibrary  library;
   tIdlClass    idlClass; 
   tBracket     bracket;

   if(itype < 0) Write.Text("None");
   else if(itype == Defines.TYP_VARARRAY) Write.Text("Variant[]");
   else if(itype == Defines.TYP_SAFEARRAY) Write.Text("Variant");
   else if(itype < Defines.OPC_MAXIMUM) Write.Text(Opcode.GetSubcodeLabel(OPC.TYP,itype));
   else
   {
      objType = Store.GetObjectType(itype);
      if(objType == ObjectType.ForwardReference)
      {
         forwardRef = Store.GetVector(itype);
         forwardAdr = forwardRef.link;
         if(forwardAdr)
         {
            itype = forwardAdr;
            objType = Store.GetObjectType(itype);
         }
      }
      if(objType == ObjectType.ForwardReference) Write.Text("Variant");
      else if(objType == ObjectType.IdlInterface || objType == ObjectType.IdlCoClass)
      {
         if(hostType == ObjectType.IdlTypeDef) Write.Text(Store.GetIdent(itype));
         else
         {
            parent = Store.GetParent(itype);
            if(Store.GetObjectType(parent) == ObjectType.IdlLibrary)
            {
               if(parent != libRoot)
               {
                  library = Store.GetVector(parent);
                  ident = Store.GetString(library.name);
                  Write.Text(ident);
                  Write.Character(".");
               }
            }
            if(objType == ObjectType.IdlCoClass) ident = Store.GetName(itype);
            else
            {
               idlClass = Store.GetVector(itype);
               if(idlClass.bracket)
               {
                   Store.GetInfo(idlClass.bracket, bracket);
                   if(!bracket.DUAL && !bracket.HIDDEN)
                   {
                      Write.Text(Store.GetName(itype));
                      return;
                   }
               }
               if(!idlClass.coclass) ident = Store.GetName(itype);
               else ident = Store.GetName(idlClass.coclass);
            }
            Write.Text(ident);
         }
      }
      else
      {
         parent = Store.GetParent(itype);
         if(Store.GetObjectType(parent) == ObjectType.IdlLibrary)
         {
            if(parent != libRoot)
            {
               library = Store.GetVector(parent);
               Write.Text(Store.GetString(library.name));
               Write.Character(".");
            }
         }
         Write.Text(Store.GetIdent(itype));
      }
   }
}

void IdlWriteEvent(int libRoot,int clsRoot,int evtRoot,int nArg,string axLibname,int needsAx,int compType)
{
   tIdlLibrary  library;
   string       ident;
   int          eventType;
   string       replacement;
   string       name;

   ident = Store.GetIdent(evtRoot);
   if(nArg == 0 && compType == 0) eventType = 1;
   else eventType = 0;
   replacement = Symbol.EnumStringValue("IdlEventNames",ident);
   Write.Text("<event");
   Write.Text(" id=""");
   Write.Text(ident);
   Write.Character("""");
   Write.Text(" netName=""");
   if(replacement) Write.Text(replacement);
   else Write.Text(ident);
   Write.Character("""");
   Write.Text(" netHandler=""");
   if(!eventType)
   {
      if(axLibname) Write.Text(axLibname);
      else
      {
         library = Store.GetVector(libRoot);
         ident = Store.GetString(library.name);
         Write.Text(ident);
      }
      Write.Character(".");
      name = Store.GetName(clsRoot);
      Write.Text(name);
      Write.Character("_");
      name = Store.GetName(evtRoot);
      Write.Text(name);
      Write.Text("EventHandler");
   }
   else
   {
      Write.Text("System.EventHandler");
   }
   Write.Character("""");
   if(needsAx)
   {
      Write.Text(" netArgs=""");
      if(eventType == 0)
      {
         if(axLibname) Write.Text(axLibname);
         else
         {
            library = Store.GetVector(libRoot);
            ident = Store.GetString(library.name);
            Write.Text(ident);
         }
         Write.Character(".");
         name = Store.GetName(clsRoot);
         Write.Text(name);
         Write.Character("_");
         if(replacement) Write.Text(replacement);
         else 
         {
            name = Store.GetName(evtRoot);
            Write.Text(name);
            Write.Text("Event");
         }
      }
      else
      {
         Write.Text("EventArgs");
      }
      Write.Character("""");
   }
}

void IdlWriteCoclass(int libRoot,int clsRoot,string axLibname,int libAttr)
{
   tIdlLibrary library;
   string      ident;
   tIdlCoclass coClass;
   tBracket    bracket;
   int         members[1024];
   int         nMember;
   int         iMember;
   int         parent;
   int         needsAx;
   string      name;
   string      fullname;
   string      stubBaseClass;

   coClass = Store.GetVector(clsRoot);
   if(coClass.members == 0) nMember = 0;
   else
   {
      nMember = Store.ReadInfo(members,coClass.members)/4;
   }
   coClass = Store.GetVector(clsRoot);
   if(coClass.bracket)
   {
      Store.GetInfo(coClass.bracket,bracket);
      libAttr = libAttr | bracket.flags;
   }
   needsAx = 0;
   if((axLibname != NULL) && (libAttr & Mask(IdlFlags.CONTROL)))
   {
      for(iMember = 0; iMember < nMember; iMember = iMember + 2)
      {
         parent = Store.GetParent(members[iMember]);
         if(parent == libRoot)
         {
            if(members[iMember+1] & Mask(IdlFlags.SOURCE)) needsAx = 1;
         }
      }
   }
   Write.ChangeMargin(1);
   Write.Text("<coclass id=""");
   name = Store.GetName(clsRoot);
   Write.Text(name);
   Write.Character("""");
   
   library = Store.GetVector(libRoot);
   ident = Store.GetString(library.name);
   fullname = ident + "." + name;
   stubBaseClass = Registry.GetNameValue("StubBaseClass", fullname , stubBaseClass);
   coClass = Store.GetVector(clsRoot);
   if(coClass.bracket)
   {
      Store.GetInfo(coClass.bracket,bracket);
      if(bracket.APPOBJECT)
      {
         Write.Text(" appobject=""");
         library = Store.GetVector(libRoot);
         ident = Store.GetString(library.name);
         Write.Text(ident);
         Write.Character(".");
         name = Store.GetName(clsRoot);
         Write.Text(name);
         Write.Text("Class");
         Write.Character("""");
      }
      if(bracket.uuid)
      {
         Write.Text(" uuid=""");
         ident = Store.GetString(bracket.uuid);
         Write.Text(ident);
         Write.Character("""");
      }
      if(bracket.NONCREATABLE)
      {
         Write.Text(" creatable=""off""");
      }
      if(needsAx)
      { 
         Write.Text(" migStatus=""ActiveX""");
         Write.Text(" migName=""");
         Write.Text(axLibname);
         Write.Text(".Ax");
         name = Store.GetName(clsRoot);
         Write.Text(name);
         Write.Character("""");
      }
      if(stubBaseClass)
      {
         Write.Text(" StubBaseClass=""");
         Write.Text(stubBaseClass);
         Write.Character("""");
      }
   }

   if(nMember == 0)
   {
      Write.Text(">");
      Write.Record();
      Write.Text("</coclass>");
      Write.Record();
      Write.ChangeMargin(-1);
      return;
   }
   Write.Text(">");
   Write.Record();
   Write.ChangeMargin(1);
   for(iMember = 0; iMember < nMember; iMember = iMember + 2)
   {
      parent = Store.GetParent(members[iMember]);
      if(parent != libRoot)
      {
         Write.Text("<implements id=""");
         library = Store.GetVector(parent);
         ident = Store.GetString(library.name);
         Write.Text(ident);
         Write.Character(".");
         name = Store.GetName(members[iMember]);
         Write.Text(name);
         Write.Character("""");
      }
      else
      {
         Write.Text("<subclass id=""");
         name = Store.GetName(members[iMember]);
         Write.Text(name);
         Write.Character("""");
      }
      Write.Text("/>");
      Write.Record();
   }
   Write.ChangeMargin(-1);
   Write.Text("</coclass>");
   Write.Record();
   Write.ChangeMargin(-1);
}

int IdlFindEnumEntry(int enumRoot,string sValue)
{
   tEnumEntry  enumEntry;
   int         entry;
   int         objtype;
   int         iValue;
   tForwardRef forwardRef;

   if(Store.GetObjectType(enumRoot) == ObjectType.ForwardReference)
   {
      forwardRef = Store.GetVector(enumRoot);
      enumRoot = forwardRef.link;
      if(enumRoot == 0) return 0;
   }
   iValue = sValue;
   for(entry = Store.GetFirst(enumRoot); entry; entry = Store.GetNext(entry))
   {
      objtype = Store.GetObjectType(entry);
      if(objtype == ObjectType.EnumeratedEntry)
      {
         enumEntry = Store.GetVector(entry);
         if(enumEntry.value == iValue) return entry;
      }
   }
   return 0;
}

void IdlWriteClass(int libRoot,int clsRoot,string axLibname,int libAttr)
{
   int          iChild;
   string       ident;
   int          objtype;
   tIdlComp     component;
   int          iarg;
   tIdlArg      arg;
   tIdlClass    interface;
   tIdlLibrary  library;
   tIdlCoclass  coClass;
   int          iComp;
   int          nArg;
   int          entry;
   tBracket     bracket;
   int          defprop;
   int          isIndexer;
   int          isAccessor;
   int          getter;
   int          setter;
   int          letter;
   int          foundOptional;
   string       coclassId;
   string       replacement;
   string       newIdent;
   int          libType;
   string       name;
   int          needsAx;
   int          members[1024];
   int          nMember;
   int          iMember;
   int          parent;

   library = Store.GetVector(libRoot);
   libType = library.libType;
   interface = Store.GetVector(clsRoot);
   needsAx = 0;
   if(interface.coclass != 0)
   {
      coclassId = Store.GetName(interface.coclass);
      coClass = Store.GetVector(interface.coclass);
      if(coClass.members == 0) nMember = 0;
      else nMember = Store.ReadInfo(members,coClass.members)/4;
      if(coClass.bracket != 0)
      {
         Store.GetInfo(coClass.bracket,bracket);
         libAttr = libAttr | bracket.flags;
      }
      for(iMember = 0; iMember < nMember; iMember = iMember + 2)
      {
         parent = Store.GetParent(members[iMember]);
         if(parent == libRoot)
         {
            if(members[iMember+1] & Mask(IdlFlags.SOURCE)) needsAx = 1;
         }
      }
   }
   else coclassId = NULL;
   Write.ChangeMargin(1);
   Write.Text("<class id=""");
   name = Store.GetName(clsRoot);
   Write.Text(name);
   Write.Character("""");
   Write.Text(" parent=""");
   if(interface.parent != 0)
   {
      name = Store.GetName(interface.parent);
      Write.Text(name);
   }
   else if(interface.InIunknown) Write.Text("IUnknown");
   else if(interface.InIdispatch) Write.Text("IDispatch");
   else Write.Text("None");
   Write.Character("""");
   if(interface.InModule)
   {
      Write.Text(" module=""on""");
   }
   defprop = interface.defProperty;
   if(defprop)
   {
      Write.Text(" default=""");
      name = Store.GetName(defprop);
      Write.Text(name);
      Write.Character("""");
   }
   if(interface.bracket != 0)
   {
      Store.GetInfo(interface.bracket,bracket);
      if(!bracket.HIDDEN)
      {
         Write.Text(" creatable=""off""");
      }
   }
   Write.Text(">");
   Write.Record();
   Write.ChangeMargin(1);
   for(iChild = Store.GetFirst(clsRoot); iChild; iChild = Store.GetNext(iChild))
   {
      objtype = Store.GetObjectType(iChild);
      ident = Store.GetName(iChild);
      if(objtype != ObjectType.IdlComponent)
      {
         Write.Integer(objtype,-5);
         Write.Text(ident);
         Write.Record();
      }
      else
      {
         component = Store.GetVector(iChild);
         if(component.object < IdlObject.Constant || component.object > IdlObject.Event)
         {
            Write.Text("<COMPONENT.");
            Write.Integer(component.object,0);
            Write.Text(" id=""");
            Write.Text(ident);
            Write.Character("""");
            Write.Text("/>");
            Write.Record();
         }
      }
   }
   for(iComp = IdlObject.Constant; iComp <= idlObject.Event; iComp = iComp + 1)
   {
      for(iChild = Store.GetFirst(clsRoot); iChild; iChild = Store.GetNext(iChild))
      {
         objtype = Store.GetObjectType(iChild);
         isIndexer = 0;
         isAccessor = 0;
         getter = 0;
         setter = 0;
         letter = 0;
         if(objtype != ObjectType.IdlComponent)
         {
            continue;
         }
         ident = Store.GetName(iChild);
         component = Store.GetVector(iChild);
         if(component.object != iComp)
         {
            continue;
         }
         nArg = component.nArg;
         if(iComp == IdlObject.Constant)
         {
            Write.Text("<constant");
            Write.Text(" id=""");
            Write.Text(ident);
            Write.Character("""");
            Write.Text(" type=""");
            IdlWriteType(component.type,ObjectType.IdlComponent,libRoot);
            if(component.SafeArray) Write.Text("[]");
            Write.Character("""");
            Write.Text(" value=""");
            ident = Store.GetString(component.nArg);
            Write.Text(ident);
            Write.Character("""");
         }
         else if(iComp == IdlObject.Property)
         {
            Write.Text("<property");
            Write.Text(" id=""");
            Write.Text(ident);
            Write.Character("""");
            if(ident == coclassId)
            {
               Write.Text(" migName=""");
               Write.Text(ident);
               Write.Text("_Property");
               Write.Character("""");
            }
            if(libType == LibraryType.ActiveX)
            {
               replacement = Symbol.EnumStringValue("IdlEventMembers",ident);
               if(replacement)
               {
                  Write.Text(" migName=""");
                  Write.Text(replacement);
                  Write.Character("""");
               }
            }
            Write.Text(" type=""");
            IdlWriteType(component.type,ObjectType.IdlComponent,libRoot);
            if(component.SafeArray) Write.Text("[]");
            Write.Character("""");
            if(component.PropGet || component.PropPut || component.PropPutRef)
            {
               Write.Text(" status=""");
               if(component.PROPGET && component.PROPPUT && component.PROPPUTREF)
               {
                  Write.Text("GetSetLet");
                  getter = 1;
                  setter = 1;
                  letter = 1;
               }
               else if(!component.PROPPUT && !component.PROPPUTREF) Write.Text("Out");
               else if(!component.PROPGET) Write.Text("In");
               else Write.Text("InOut");
               Write.Character("""");
            }
         }
         else if(iComp == IdlObject.Method)
         {
            if(component.PROPGET && nArg > 0)
            {
               isAccessor = 1;
               if(iChild == defprop)
               {
                  iarg = Store.GetFirst(iChild);
                  arg = Store.GetVector(iarg);
                  if(!arg.Out)
                  { 
                     isIndexer = 1;
                     isAccessor = 0;
                  }
               }
            }
            if(isAccessor) Write.Text("<accessor");
            else Write.Text("<method");
            Write.Text(" id=""");
            Write.Text(ident);
            Write.Character("""");
            if(libType == LibraryType.ActiveX)
            {
               replacement = Symbol.EnumStringValue("IdlEventMembers",ident);
               if(replacement)
               {
                  Write.Text(" migName=""");
                  Write.Text(replacement);
                  Write.Character("""");
               }
            }
            Write.Text(" type=""");
            IdlWriteType(component.type,ObjectType.IdlComponent,libRoot);
            if(component.SAFEARRAY) Write.Text("[]");
            Write.Character("""");
            if(isIndexer) Write.Text(" status=""indexer""");
         }
         else if(iComp == IdlObject.Event)
         {
            IdlWriteEvent(libRoot,clsRoot,iChild,component.nArg,axLibname,needsAx,component.type);
            if(component.type > 0)
            {
               Write.Text(" type=""");
	       IdlWriteType(component.type,ObjectType.IdlComponent,libRoot);
	       if(component.SAFEARRAY) Write.Text("[]");
	       Write.Character("""");
	    }
         }
         iarg = Store.GetFirst(iChild);
         if(getter != 0 || setter != 0 || letter != 0)
         {
            Write.Text(">");
            Write.Record();
            Write.ChangeMargin(1);
            if(getter != 0)
            {
               Write.Text("<Get npram=""1"" migPattern=""%1d.");
               Write.Text(ident);
               Write.Text("""/>");
               Write.Record();
            }
            if(setter != 0)
            {
               Write.Text("<Set npram=""2"" migPattern=""%1d.");
               Write.Text(ident);
               Write.Text(" = %2d\c""/>");
               Write.Record();
            }
            if(letter != 0)
            {
               Write.Text("<Let npram=""2"" migPattern=""%2d.let_");
               Write.Text(ident);
               Write.Text("(%1d)\c""/>");
               Write.Record();
            }
            Write.ChangeMargin(-1);
            Write.Text("</property>");
            Write.Record();
         }
         else if(iarg == 0 || iComp == IdlObject.Property)
         {
            Write.Text("/>");
            Write.Record();
         }
         else
         {
            Write.Text(">");
            Write.Record();
            Write.ChangeMargin(1);
            foundOptional = 0;
            while(iarg != 0 && nArg > 0)
            {
               nArg = nArg - 1;
               ident = Store.GetName(iarg);
               if(iComp == IdlObject.Event)
               {
                  replacement = Symbol.EnumStringValue("IdlEventArgs",ident);
                  if(replacement)
                  {
                     ident = replacement;
                  }
                  else ident = Character.Tolower(ident,0,1);
               }
               arg = Store.GetVector(iarg);
               Write.Text("<argument id=""");
               Write.Text(ident);
               Write.Character("""");
               Write.Text(" type=""");
               IdlWriteType(arg.type,ObjectType.IdlComponent,libRoot);
               if(arg.SAFEARRAY)
               {
                  if(arg.type != BinaryType.Variant || nArg > 0) Write.Text("[]");
               }
               Write.Character("""");
               Write.Text(" status=""");
               if(arg.SAFEARRAY && arg.type == BinaryType.Variant && nArg == 0)
               {
                  if(arg.IN)
                  {
                     if(arg.OUT) Write.Text("RefParamArray");
                     else Write.Text("ParamArray");
                  }
                  else Write.Text("RefParamArray");
               }
               else
               {
                  if(arg.IN)
                  {
                     if(arg.OUT) Write.Text("ByRef");
                     else Write.Text("ByVal");
                  }
                  else if(arg.OUT) Write.Text("Out");
                  else Write.Text("ByVal");
               }
               Write.Character("""");
               if(arg.OPTIONAL || arg.LCID || foundOptional)
               {
                  foundOptional = 1;
                  Write.Text(" optional=""");
                  if(arg.defaultValue == 0) Write.Text("Default");
                  else
                  {
                     ident = Store.GetString(arg.defaultValue);
                     if(ident == "null")
                     {
                        ident = "DEF.NullObject";
                     }
                     else if(arg.type > BinaryType.User)
                     {
                        entry = IdlFindEnumEntry(arg.type,ident);
                        if(entry != 0) ident = Store.GetName(entry);
                     }
                     else if(arg.type == BinaryType.Boolean)
                     {
                        if(ident == "0")
                        {
                           ident = "false";
                        }
                        else if(ident == "-1")
                        {
                            ident = "true";
                        }
                     }
                     if(!ident) Write.Text("Default");
                     else Write.Text(ident);
                  }
                  Write.Character("""");
               }
               Write.Text("/>");
               Write.Record();
               iarg = Store.GetNext(iarg);
            }
            Write.ChangeMargin(-1);
            component = Store.GetVector(iChild);
            if(component.object == IdlObject.Property) Write.Text("</property>");
            else if(component.object == IdlObject.Method)
            {
               if(component.PROPGET)
               {
                  if(isAccessor) Write.Text("</accessor>");
                  else Write.Text("</method>");
               }
               else Write.Text("</method>");
            }
            else if(component.object == IdlObject.Event) Write.Text("</event>");
            Write.Record();
         }
      }
   }
   Write.ChangeMargin(-1);
   Write.Text("</class>");
   Write.Record();
   Write.ChangeMargin(-1);
}

void IdlWriteTypedef(int typRoot,int libRoot)
{
   tTypedef  rootInfo;
   string    name;

   rootInfo = Store.GetVector(typRoot);
   Write.ChangeMargin(1);
   Write.Text("<typedef id=""");
   name = Store.GetName(typRoot);
   Write.Text(name);
   Write.Character("""");
   Write.Text(" type=""");
   IdlWriteType(rootInfo.type,ObjectType.IdlTypeDef,libRoot);
   Write.Character("""");
   Write.Text("/>");
   Write.Record();
   Write.ChangeMargin(-1);
}

void IdlWriteStruct(int structRoot,int isUnion,int libRoot)
{
   string       ident;
   tIdlStruct   info;
   tIdlArg      memInfo;
   int          iChild;
   string       name;

   info = Store.GetVector(structRoot);
   Write.ChangeMargin(1);
   if(isUnion) Write.Text("<union id=""");
   else Write.Text("<structure id=""");
   name = Store.GetName(structRoot);
   Write.Text(name);
   Write.Character("""");
   Write.Text(">");
   Write.Record();
   Write.ChangeMargin(1);
   for(iChild = Store.GetFirst(structRoot); iChild; iChild = Store.GetNext(iChild))
   {
      ident = Store.GetIdent(iChild);
      memInfo = Store.GetVector(iChild);
      Write.Text("<member id=""");
      Write.Text(ident);
      Write.Character("""");
      Write.Text(" type=""");
      IdlWriteType(memInfo.type,ObjectType.IdlStruct,libRoot);
      if(memInfo.flags) Write.Text("[]");
      Write.Character("""");
      Write.Text("/>");
      Write.Record();
   }
   Write.ChangeMargin(-1);
   if(isUnion) Write.Text("</union>");
   else Write.Text("</structure>");
   Write.Record();
   Write.ChangeMargin(-1);
}
